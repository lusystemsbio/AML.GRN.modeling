remove(list = ls())
NO_SAMPLES <- 10
SAMPLE_SIZE <- 10000
NO_TOP_CIRCUITS <- 10
PERCENT_REDUCTION <- 95
library(sRACIPE)
source('../../../networks/functions.R')
source('../../networks/functions.R')
source('../../../networks/heatmapSimilarity.updated.R')
source('../../networks/heatmapSimilarity.updated.R')
source('./functions.R')
outdir <- './results/'
dir.create(outdir)
getwd()
circuit_metrics.sim.sorted <- read.csv('../rankings.mean_acc/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuits <- rownames(circuit_metrics.sim.sorted)[2:(NO_TOP_CIRCUITS+1)]
names(circuits) <- circuits
circuit_metrics.sim.sorted <- read.csv('../rankings.mean_acc/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
View(circuit_metrics.sim.sorted)
circuits <- rownames(circuit_metrics.sim.sorted)[2:(NO_TOP_CIRCUITS+1)]
circuits
length(circuits)
head(circuits)
circuits <- rownames(circuit_metrics.sim.sorted)[1:(NO_TOP_CIRCUITS)]
names(circuits) <- circuits
circuits
circuit_metrics <- read.csv(file = '../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[circuits, ]
View(circuit_metrics.sim)
circuit_metrics <- read.csv(file = '../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[circuits, ]
circuit_metrics <- read.csv(file = '../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[circuits, ]
length(names(circuits))
fname.list <- list()
tmp <- read.csv(file = paste0('../../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
tmp <- read.csv(file = paste0('../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
fname.TFactivities <- '../../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
fname.TFactivities <- '../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.list <- list()
for(SAMPLE_NO in 1:NO_SAMPLES){
sample_name <- paste0('S', SAMPLE_NO)
start.idx <- SAMPLE_SIZE * (SAMPLE_NO-1) + 1
end.idx <- SAMPLE_SIZE * SAMPLE_NO
# print(start.idx)
# print(end.idx)
# Create data structure to save metrics for the current samples:
#--------------------------------------------------------------
# accuracy.avgDist <- as.data.frame(matrix(nrow = dim(circuit_metrics.sim)[1], ncol = 0) )
# accuracy.avgDist$SimIdx <- circuit_metrics.sim$SimIdx
# rownames(accuracy.avgDist) <- rownames(circuit_metrics.sim)
accuracy.avgDist <- circuit_metrics.sim
# Calculate metricx (Accuracy and AvgDist) for the current sample:
#----------------------------------------------------------------
circuit_idx <- names(circuits)[1]
for(circuit_idx in names(circuits)){
print(circuit_idx)
data.REF <-  TF_activities[[circuit_idx]]
# obtain simulated data:
racipe <- readRDS(file = paste('../../circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
racipe <- racipe[, start.idx:end.idx]
data.sim <- assay(racipe,1)
#data.sim.sub <- data.sim[, start.idx:end.idx]
#break()
# calculate similarity between activitites and racipe simulation data:
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
accuracy.avgDist[circuit_idx, "ClusterA"] <- hS$simulated.cluster.freq[2]
accuracy.avgDist[circuit_idx, "ClusterB"] <- hS$simulated.cluster.freq[3]
accuracy.avgDist[circuit_idx,"KLdist"] <- hS$KL
accuracy.avgDist[circuit_idx,"ClusterA2"] <- hS$cluster.similarity[2]
accuracy.avgDist[circuit_idx,"ClusterB2"] <- hS$cluster.similarity[3]
accuracy.avgDist[circuit_idx, "Accuracy"] <- (hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
accuracy.avgDist[circuit_idx, "AvgDist"] <- hS$AvgDist
# calculate circuit flexibility by KD subsetting
racipe.kd <- sRACIPE::sracipeKnockDown(racipe,
plotToFile = FALSE,
plotBarPlot = FALSE, #TRUE,
plotHeatmap = FALSE,
reduceProduction = (100-PERCENT_REDUCTION)
)
flexibility_as_avg.dist <- calDistance(racipe.kd)
accuracy.avgDist[circuit_idx, "flexibility"] <- flexibility_as_avg.dist
#break()
}
circuit_metrics.sim.list[[sample_name]] <- accuracy.avgDist
#break()
}
getwd()
racipe <- readRDS(file = paste('../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
circuit_metrics.sim.list <- list()
for(SAMPLE_NO in 1:NO_SAMPLES){
sample_name <- paste0('S', SAMPLE_NO)
start.idx <- SAMPLE_SIZE * (SAMPLE_NO-1) + 1
end.idx <- SAMPLE_SIZE * SAMPLE_NO
# print(start.idx)
# print(end.idx)
# Create data structure to save metrics for the current samples:
#--------------------------------------------------------------
# accuracy.avgDist <- as.data.frame(matrix(nrow = dim(circuit_metrics.sim)[1], ncol = 0) )
# accuracy.avgDist$SimIdx <- circuit_metrics.sim$SimIdx
# rownames(accuracy.avgDist) <- rownames(circuit_metrics.sim)
accuracy.avgDist <- circuit_metrics.sim
# Calculate metricx (Accuracy and AvgDist) for the current sample:
#----------------------------------------------------------------
circuit_idx <- names(circuits)[1]
for(circuit_idx in names(circuits)){
print(circuit_idx)
data.REF <-  TF_activities[[circuit_idx]]
# obtain simulated data:
racipe <- readRDS(file = paste('../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
racipe <- racipe[, start.idx:end.idx]
data.sim <- assay(racipe,1)
#data.sim.sub <- data.sim[, start.idx:end.idx]
#break()
# calculate similarity between activitites and racipe simulation data:
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
accuracy.avgDist[circuit_idx, "ClusterA"] <- hS$simulated.cluster.freq[2]
accuracy.avgDist[circuit_idx, "ClusterB"] <- hS$simulated.cluster.freq[3]
accuracy.avgDist[circuit_idx,"KLdist"] <- hS$KL
accuracy.avgDist[circuit_idx,"ClusterA2"] <- hS$cluster.similarity[2]
accuracy.avgDist[circuit_idx,"ClusterB2"] <- hS$cluster.similarity[3]
accuracy.avgDist[circuit_idx, "Accuracy"] <- (hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
accuracy.avgDist[circuit_idx, "AvgDist"] <- hS$AvgDist
# calculate circuit flexibility by KD subsetting
racipe.kd <- sRACIPE::sracipeKnockDown(racipe,
plotToFile = FALSE,
plotBarPlot = FALSE, #TRUE,
plotHeatmap = FALSE,
reduceProduction = (100-PERCENT_REDUCTION)
)
flexibility_as_avg.dist <- calDistance(racipe.kd)
accuracy.avgDist[circuit_idx, "flexibility"] <- flexibility_as_avg.dist
#break()
}
circuit_metrics.sim.list[[sample_name]] <- accuracy.avgDist
#break()
}
dim(data.sim)
print(circuit_idx)
View(circuit_metrics.sim.sorted)
start.idx
end.idx
dim(data.sim)
end.idx
print(circuit_idx)
remove(list = ls())
NO_SAMPLES <- 10
SAMPLE_SIZE <- 10000
NO_TOP_CIRCUITS <- 10
PERCENT_REDUCTION <- 95
library(sRACIPE)
source('../../networks/functions.R')
source('../../networks/heatmapSimilarity.updated.R')
source('./functions.R')
outdir <- './results/'
dir.create(outdir)
circuit_metrics.sim.sorted <- read.csv('../rankings.mean_acc/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuits <- rownames(circuit_metrics.sim.sorted)[1:(NO_TOP_CIRCUITS)]
names(circuits) <- circuits
circuit_metrics <- read.csv(file = '../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[circuits, ]
tmp <- read.csv(file = paste0('../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
fname.TFactivities <- '../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
getwd()
fname.TFactivities <- '../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.list <- list()
SAMPLE_NO <- 1:NO_SAMPLES[1]
sample_name <- paste0('S', SAMPLE_NO)
start.idx <- SAMPLE_SIZE * (SAMPLE_NO-1) + 1
end.idx <- SAMPLE_SIZE * SAMPLE_NO
start.idx
end.idx
cat(end.idx)
accuracy.avgDist <- circuit_metrics.sim
circuit_idx <- names(circuits)[1]
print(circuit_idx)
data.REF <-  TF_activities[[circuit_idx]]
racipe <- readRDS(file = paste('../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
racipe <- readRDS(file = paste('../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- racipe[, start.idx:end.idx]
start.idx:end.idx
start.idx:end.idx
seq(start.idx, end.idx)
start.idx:end.idx
start.idx
end.idx
start.idx:end.idx
start.idx <- SAMPLE_SIZE * (SAMPLE_NO-1) + 1
end.idx <- SAMPLE_SIZE * SAMPLE_NO
start.idx:end.idx
start.idx
end.idx
sample(10)
sample(10, 5)
sample(10, 4)
?sample
sample(10, 10)
sample(10, 20)
nrow(racipe)
ncol(racipe)
SAMPLE_SIZE
racipe <- readRDS(file = paste('../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- racipe[, sample(ncol(racipe), SAMPLE_SIZE)]
racipe <- sracipeNormalize(racipe)
data.sim <- assay(racipe,1)
