remove(list = ls())
NO_SAMPLES <- 10
SAMPLE_SIZE <- 10000
library(sRACIPE)
source('../../../networks/functions.R')
source('../../../networks/heatmapSimilarity.updated.R')
outdir <- './results/'
dir.create(outdir)
circuit_metrics <- read.csv(file = '../../circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[!circuit_metrics$DupStatus,]
circuit_metrics <- read.csv(file = '../../circuits/summary.circuits.csv', row.names = 1)
circuit_metrics <- read.csv(file = '../../../circuits/summary.circuits.csv', row.names = 1)
circuit_metrics <- read.csv(file = '../../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[!circuit_metrics$DupStatus,]
circuits <- readRDS('../../circuits/circuits.uniq.rds')
circuits <- readRDS('../../../networks/circuits/circuits.uniq.rds')
length(names(circuits))
fname.list <- list()
circuits <- readRDS('../../../networks/circuits/circuits.uniq.rds')
length(names(circuits))
fname.list <- list()
for(idx in names(circuits)){
#print(idx)
fname.list[[idx]] <- paste('../../circuits.sim/circuit_simulated_', idx, '.rds', sep = '')
}
names(fname.list) <- names(circuits)
tmp <- read.csv(file = paste0('../../circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
fname.TFactivities <- '../../circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.list <- list()
circuit_metrics.sim.list <- list()
fname.TFactivities <- '../../circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
fname.TFactivities <- '../../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.list <- list()
for(SAMPLE_NO in 1:NO_SAMPLES){
sample_name <- paste0('S', SAMPLE_NO)
start.idx <- SAMPLE_SIZE * (SAMPLE_NO-1) + 1
end.idx <- SAMPLE_SIZE * SAMPLE_NO
# print(start.idx)
# print(end.idx)
# Create data structure to save metrics for the current samples:
#--------------------------------------------------------------
# accuracy.avgDist <- as.data.frame(matrix(nrow = dim(circuit_metrics.sim)[1], ncol = 0) )
# accuracy.avgDist$SimIdx <- circuit_metrics.sim$SimIdx
# rownames(accuracy.avgDist) <- rownames(circuit_metrics.sim)
accuracy.avgDist <- circuit_metrics.sim
# Calculate metricx (Accuracy and AvgDist) for the current sample:
#----------------------------------------------------------------
for(circuit_idx in names(circuits)){
print(circuit_idx)
data.REF <-  TF_activities[[circuit_idx]]
# obtain simulated data:
racipe <- readRDS(file = paste('../../circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
data.sim <- assay(racipe,1)
data.sim.sub <- data.sim[, start.idx:end.idx]
#break()
# calculate similarity between activitites and racipe simulation data:
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim.sub, #data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
accuracy.avgDist[circuit_idx, "ClusterA"] <- hS$simulated.cluster.freq[2]
accuracy.avgDist[circuit_idx, "ClusterB"] <- hS$simulated.cluster.freq[3]
accuracy.avgDist[circuit_idx,"KLdist"] <- hS$KL
accuracy.avgDist[circuit_idx,"ClusterA2"] <- hS$cluster.similarity[2]
accuracy.avgDist[circuit_idx,"ClusterB2"] <- hS$cluster.similarity[3]
accuracy.avgDist[circuit_idx, "Accuracy"] <- (hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
accuracy.avgDist[circuit_idx, "AvgDist"] <- hS$AvgDist
#break()
}
circuit_metrics.sim.list[[sample_name]] <- accuracy.avgDist
}
tmp <- read.csv(file = paste0('../../circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
tmp <- read.csv(file = paste0('../../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
fname.TFactivities <- '../../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.list <- list()
for(SAMPLE_NO in 1:NO_SAMPLES){
sample_name <- paste0('S', SAMPLE_NO)
start.idx <- SAMPLE_SIZE * (SAMPLE_NO-1) + 1
end.idx <- SAMPLE_SIZE * SAMPLE_NO
# print(start.idx)
# print(end.idx)
# Create data structure to save metrics for the current samples:
#--------------------------------------------------------------
# accuracy.avgDist <- as.data.frame(matrix(nrow = dim(circuit_metrics.sim)[1], ncol = 0) )
# accuracy.avgDist$SimIdx <- circuit_metrics.sim$SimIdx
# rownames(accuracy.avgDist) <- rownames(circuit_metrics.sim)
accuracy.avgDist <- circuit_metrics.sim
# Calculate metricx (Accuracy and AvgDist) for the current sample:
#----------------------------------------------------------------
for(circuit_idx in names(circuits)){
print(circuit_idx)
data.REF <-  TF_activities[[circuit_idx]]
# obtain simulated data:
racipe <- readRDS(file = paste('../../circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
data.sim <- assay(racipe,1)
data.sim.sub <- data.sim[, start.idx:end.idx]
#break()
# calculate similarity between activitites and racipe simulation data:
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim.sub, #data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
accuracy.avgDist[circuit_idx, "ClusterA"] <- hS$simulated.cluster.freq[2]
accuracy.avgDist[circuit_idx, "ClusterB"] <- hS$simulated.cluster.freq[3]
accuracy.avgDist[circuit_idx,"KLdist"] <- hS$KL
accuracy.avgDist[circuit_idx,"ClusterA2"] <- hS$cluster.similarity[2]
accuracy.avgDist[circuit_idx,"ClusterB2"] <- hS$cluster.similarity[3]
accuracy.avgDist[circuit_idx, "Accuracy"] <- (hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
accuracy.avgDist[circuit_idx, "AvgDist"] <- hS$AvgDist
#break()
}
circuit_metrics.sim.list[[sample_name]] <- accuracy.avgDist
}
remove(list = ls())
NO_SAMPLES <- 10
SAMPLE_SIZE <- 10000
NO_TOP_CIRCUITS <- 11
library(sRACIPE)
source('../../../networks/functions.R')
source('../../../networks/heatmapSimilarity.updated.R')
outdir <- './results/'
dir.create(outdir)
circuit_metrics.sim.sorted <- read.csv('../../../networks/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuit_metrics.sim.sorted <- read.csv('../../../networks/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuits <- rownames(circuit_metrics.sim.sorted)[1:NO_TOP_CIRCUITS]
names(circuits) <- circuits
circuit_metrics <- read.csv(file = '../../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[circuits, ]
length(names(circuits))
fname.list <- list()
for(idx in names(circuits)){
#print(idx)
fname.list[[idx]] <- paste('../../circuits.sim/circuit_simulated_', idx, '.rds', sep = '')
}
names(fname.list) <- names(circuits)
tmp <- read.csv(file = paste0('../../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
fname.TFactivities <- '../../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.list <- list()
for(SAMPLE_NO in 1:NO_SAMPLES){
sample_name <- paste0('S', SAMPLE_NO)
start.idx <- SAMPLE_SIZE * (SAMPLE_NO-1) + 1
end.idx <- SAMPLE_SIZE * SAMPLE_NO
# print(start.idx)
# print(end.idx)
# Create data structure to save metrics for the current samples:
#--------------------------------------------------------------
# accuracy.avgDist <- as.data.frame(matrix(nrow = dim(circuit_metrics.sim)[1], ncol = 0) )
# accuracy.avgDist$SimIdx <- circuit_metrics.sim$SimIdx
# rownames(accuracy.avgDist) <- rownames(circuit_metrics.sim)
accuracy.avgDist <- circuit_metrics.sim
# Calculate metricx (Accuracy and AvgDist) for the current sample:
#----------------------------------------------------------------
for(circuit_idx in names(circuits)){
print(circuit_idx)
data.REF <-  TF_activities[[circuit_idx]]
# obtain simulated data:
racipe <- readRDS(file = paste('../../circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
data.sim <- assay(racipe,1)
data.sim.sub <- data.sim[, start.idx:end.idx]
#break()
# calculate similarity between activitites and racipe simulation data:
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim.sub, #data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
accuracy.avgDist[circuit_idx, "ClusterA"] <- hS$simulated.cluster.freq[2]
accuracy.avgDist[circuit_idx, "ClusterB"] <- hS$simulated.cluster.freq[3]
accuracy.avgDist[circuit_idx,"KLdist"] <- hS$KL
accuracy.avgDist[circuit_idx,"ClusterA2"] <- hS$cluster.similarity[2]
accuracy.avgDist[circuit_idx,"ClusterB2"] <- hS$cluster.similarity[3]
accuracy.avgDist[circuit_idx, "Accuracy"] <- (hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
accuracy.avgDist[circuit_idx, "AvgDist"] <- hS$AvgDist
#break()
}
circuit_metrics.sim.list[[sample_name]] <- accuracy.avgDist
}
circuit_metrics.sim.sorted <- read.csv('../../../networks/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuits <- rownames(circuit_metrics.sim.sorted)[1:NO_TOP_CIRCUITS]
names(circuits) <- circuits
View(circuit_metrics.sim.sorted)
circuits <- rownames(circuit_metrics.sim.sorted)[2:NO_TOP_CIRCUITS]
names(circuits) <- circuits
length(circuits)
NO_SAMPLES <- 10
SAMPLE_SIZE <- 10000
NO_TOP_CIRCUITS <- 10 # 2:11
library(sRACIPE)
source('../../../networks/functions.R')
source('../../../networks/heatmapSimilarity.updated.R')
outdir <- './results/'
dir.create(outdir)
circuit_metrics.sim.sorted <- read.csv('../../../networks/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuits <- rownames(circuit_metrics.sim.sorted)[2:NO_TOP_CIRCUITS]
names(circuits) <- circuits
circuit_metrics <- read.csv(file = '../../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[circuits, ]
length(names(circuits))
fname.list <- list()
for(idx in names(circuits)){
#print(idx)
fname.list[[idx]] <- paste('../../circuits.sim/circuit_simulated_', idx, '.rds', sep = '')
}
names(fname.list) <- names(circuits)
tmp <- read.csv(file = paste0('../../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
fname.TFactivities <- '../../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.sorted <- read.csv('../../../networks/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuits <- rownames(circuit_metrics.sim.sorted)[2:NO_TOP_CIRCUITS]
names(circuits) <- circuits
circuits <- rownames(circuit_metrics.sim.sorted)[2:(NO_TOP_CIRCUITS+1)]
names(circuits) <- circuits
length(circuits)
getwd()
remove(list = ls())
NO_SAMPLES <- 10
SAMPLE_SIZE <- 10000
NO_TOP_CIRCUITS <- 10
PERCENT_REDUCTION <- 90
library(sRACIPE)
source('../../../networks/functions.R')
source('../../../networks/heatmapSimilarity.updated.R')
source('./functions.R')
outdir <- './results/'
dir.create(outdir)
circuit_metrics.sim.sorted <- read.csv('../../../networks/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuits <- rownames(circuit_metrics.sim.sorted)[2:(NO_TOP_CIRCUITS+1)]
names(circuits) <- circuits
circuit_metrics <- read.csv(file = '../../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[circuits, ]
length(names(circuits))
fname.list <- list()
for(idx in names(circuits)){
#print(idx)
fname.list[[idx]] <- paste('../../circuits.sim/circuit_simulated_', idx, '.rds', sep = '')
}
names(fname.list) <- names(circuits)
tmp <- read.csv(file = paste0('../../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
fname.TFactivities <- '../../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.list <- list()
circuit_metrics.sim.list <- list()
for(SAMPLE_NO in 1:NO_SAMPLES){
sample_name <- paste0('S', SAMPLE_NO)
start.idx <- SAMPLE_SIZE * (SAMPLE_NO-1) + 1
end.idx <- SAMPLE_SIZE * SAMPLE_NO
# print(start.idx)
# print(end.idx)
# Create data structure to save metrics for the current samples:
#--------------------------------------------------------------
# accuracy.avgDist <- as.data.frame(matrix(nrow = dim(circuit_metrics.sim)[1], ncol = 0) )
# accuracy.avgDist$SimIdx <- circuit_metrics.sim$SimIdx
# rownames(accuracy.avgDist) <- rownames(circuit_metrics.sim)
accuracy.avgDist <- circuit_metrics.sim
# Calculate metricx (Accuracy and AvgDist) for the current sample:
#----------------------------------------------------------------
for(circuit_idx in names(circuits)){
print(circuit_idx)
data.REF <-  TF_activities[[circuit_idx]]
# obtain simulated data:
racipe <- readRDS(file = paste('../../circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
data.sim <- assay(racipe,1)
data.sim.sub <- data.sim[, start.idx:end.idx]
#break()
# calculate similarity between activitites and racipe simulation data:
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim.sub, #data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
accuracy.avgDist[circuit_idx, "ClusterA"] <- hS$simulated.cluster.freq[2]
accuracy.avgDist[circuit_idx, "ClusterB"] <- hS$simulated.cluster.freq[3]
accuracy.avgDist[circuit_idx,"KLdist"] <- hS$KL
accuracy.avgDist[circuit_idx,"ClusterA2"] <- hS$cluster.similarity[2]
accuracy.avgDist[circuit_idx,"ClusterB2"] <- hS$cluster.similarity[3]
accuracy.avgDist[circuit_idx, "Accuracy"] <- (hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
accuracy.avgDist[circuit_idx, "AvgDist"] <- hS$AvgDist
# calculate circuit flexibility by KD subsetting
# racipe.kd <- sRACIPE::sracipeKnockDown(racipe, plotToFile = FALSE,
#                                        plotBarPlot = FALSE, #TRUE,
#                                        plotHeatmap = FALSE,
#                                        reduceProduction = (100-PERCENT_REDUCTION)
# )
# flexibility_as_avg.dist <- calDistance(racipe.kd)
# accuracy.avgDist[circuit_idx, "flexibility"] <- flexibility_as_avg.dist
accuracy.avgDist[circuit_idx, "flexibility"] <- 100
break()
}
circuit_metrics.sim.list[[sample_name]] <- accuracy.avgDist
break()
}
View(accuracy.avgDist)
?sRACIPE::sracipeKnockDown
??sRACIPE::sracipeKnockDown
library(sRACIPE)
??sRACIPE::sracipeKnockDown
View(sRACIPE::sracipeKnockDown)
remove(list = ls())
circuit_metrics.sim.sorted <- readRDS(file = paste0('./rankedCircuits.acc.flex/circuit_metrics.sim.sorted.rds'))
names(circuit_metrics.sim.sorted)
perc.rank <- function(x) trunc(rank(x))/length(x)
my.df <- data.frame(x=rnorm(200))
my.df <- within(my.df, xr <- perc.rank(x))
View(my.df)
my.df <- data.frame(x=rnorm(200))
metric.comb <- as.data.frame(matrix(nrow = nrow(circuit_metrics),
ncol = (length(names(circuit_metrics.sim))+1)))
source('../../../networks/functions.R')
datadir <- './rankedCircuits.acc.flex/'
circuit_metrics.sim  <- readRDS(file = paste0(datadir,  './circuit_metrics.sim.sorted.rds'))
names(circuit_metrics.sim)
NO_SAMPLES <- length(names(circuit_metrics.sim))
remove(list = ls())
source('../../../networks/functions.R')
datadir <- './rankedCircuits.acc.flex/'
circuit_metrics.sim  <- readRDS(file = paste0(datadir,  './circuit_metrics.sim.sorted.rds'))
names(circuit_metrics.sim)
NO_SAMPLES <- length(names(circuit_metrics.sim))
circuit_metrics <- circuit_metrics.sim$S1
metric.comb <- as.data.frame(matrix(nrow = nrow(circuit_metrics),
ncol = (length(names(circuit_metrics.sim))+1)))
colnames(metric.comb) <- c(names(circuit_metrics.sim))
circuit_metrics.ordered <- circuit_metrics[order(circuit_metrics$SimIdx), ]
rownames(metric.comb) <- rownames(circuit_metrics.ordered)
rownames(metric.comb) <- c('nodes', rownames(circuit_metrics.ordered) )
metric.comb$S1 <- circuit_metrics.ordered$idxBoth
for(sample_name in names(circuit_metrics.sim)[2:NO_SAMPLES]){
print(sample_name)
circuit_metrics <- circuit_metrics.sim[[sample_name]]
circuit_metrics.ordered <- circuit_metrics[order(circuit_metrics$SimIdx), ]
metric.comb[,sample_name] <- circuit_metrics.ordered$idxBoth
}
class(metric.comb$S1)
avg.samples <- apply(metric.comb[2:ncol(metric.comb)], 1, mean)
sd.samples <- apply(metric.comb[2:ncol(metric.comb)], 1, sd)
length(avg.samples)
length(sd.samples)
metric.comb$mean <- avg.samples
metric.comb$sd <- sd.samples
metric.comb.sorted <- metric.comb[order(metric.comb$mean),]
cat(head(rownames(metric.comb.sorted)))
View(metric.comb)
remove(list = ls())
source('../../../networks/functions.R')
datadir <- './rankedCircuits.acc.flex/'
circuit_metrics.sim  <- readRDS(file = paste0(datadir,  './circuit_metrics.sim.sorted.rds'))
names(circuit_metrics.sim)
NO_SAMPLES <- length(names(circuit_metrics.sim))
circuit_metrics <- circuit_metrics.sim$S1
metric.comb <- as.data.frame(matrix(nrow = nrow(circuit_metrics),
ncol = (length(names(circuit_metrics.sim))+1)))
colnames(metric.comb) <-  c('nodes',c(names(circuit_metrics.sim)))
circuit_metrics.ordered <- circuit_metrics[order(circuit_metrics$SimIdx), ]
rownames(metric.comb) <- rownames(circuit_metrics.ordered)
metric.comb$S1 <- circuit_metrics.ordered$idxBoth
for(sample_name in names(circuit_metrics.sim)[2:NO_SAMPLES]){
print(sample_name)
circuit_metrics <- circuit_metrics.sim[[sample_name]]
circuit_metrics.ordered <- circuit_metrics[order(circuit_metrics$SimIdx), ]
metric.comb[,sample_name] <- circuit_metrics.ordered$idxBoth
}
class(metric.comb$S1)
avg.samples <- apply(metric.comb[2:ncol(metric.comb)], 1, mean)
sd.samples <- apply(metric.comb[2:ncol(metric.comb)], 1, sd)
length(avg.samples)
length(sd.samples)
metric.comb$mean <- avg.samples
metric.comb$sd <- sd.samples
metric.comb.sorted <- metric.comb[order(metric.comb$mean),]
cat(head(rownames(metric.comb.sorted)))
write.csv(metric.comb.sorted, file = paste0(datadir, 'metric.comb.sorted.csv'),
row.names = T)
metric.comb$nodes <- circuit_metrics.ordered$Nodes
metric.comb$S1 <- circuit_metrics.ordered$idxBoth
remove(list = ls())
source('../../../networks/functions.R')
datadir <- './rankedCircuits.acc.flex/'
circuit_metrics.sim  <- readRDS(file = paste0(datadir,  './circuit_metrics.sim.sorted.rds'))
names(circuit_metrics.sim)
NO_SAMPLES <- length(names(circuit_metrics.sim))
circuit_metrics <- circuit_metrics.sim$S1
metric.comb <- as.data.frame(matrix(nrow = nrow(circuit_metrics),
ncol = (length(names(circuit_metrics.sim))+1)))
colnames(metric.comb) <-  c('nodes',c(names(circuit_metrics.sim)))
circuit_metrics.ordered <- circuit_metrics[order(circuit_metrics$SimIdx), ]
rownames(metric.comb) <- rownames(circuit_metrics.ordered)
metric.comb$nodes <- circuit_metrics.ordered$Nodes
metric.comb$S1 <- circuit_metrics.ordered$idxBoth
for(sample_name in names(circuit_metrics.sim)[2:NO_SAMPLES]){
print(sample_name)
circuit_metrics <- circuit_metrics.sim[[sample_name]]
circuit_metrics.ordered <- circuit_metrics[order(circuit_metrics$SimIdx), ]
metric.comb[,sample_name] <- circuit_metrics.ordered$idxBoth
}
class(metric.comb$S1)
avg.samples <- apply(metric.comb[2:ncol(metric.comb)], 1, mean)
sd.samples <- apply(metric.comb[2:ncol(metric.comb)], 1, sd)
length(avg.samples)
length(sd.samples)
metric.comb$mean <- avg.samples
metric.comb$sd <- sd.samples
metric.comb.sorted <- metric.comb[order(metric.comb$mean),]
cat(head(rownames(metric.comb.sorted)))
View(metric.comb.sorted)
write.csv(metric.comb.sorted, file = paste0(datadir, 'metric.comb.sorted.csv'),
row.names = T)
remove(list = ls())
circuit_metrics.sim.sorted <- readRDS(file = paste0('./rankedCircuits.acc.flex/circuit_metrics.sim.sorted.rds'))
names(circuit_metrics.sim.sorted)
s1 <- circuit_metrics.sim.sorted$S1
s2 <- circuit_metrics.sim.sorted$S2
s3 <- circuit_metrics.sim.sorted$S3
s4 <- circuit_metrics.sim.sorted$S4
s5 <- circuit_metrics.sim.sorted$S5
s6 <- circuit_metrics.sim.sorted$S6
s7 <- circuit_metrics.sim.sorted$S7
s8 <- circuit_metrics.sim.sorted$S8
s9 <- circuit_metrics.sim.sorted$S9
s10 <- circuit_metrics.sim.sorted$S10
View(s1)
View(s2)
View(s9)
View(s7)
View(s8)
View(s2)
View(s7)
View(s8)
View(s1)
View(s1)
library(tensorflow)
library(tensorflow)
getwd()
circuit_metrics.sim.list <- readRDS(file = paste0('./results/circuit_metrics.sim.list.rds'))
names(circuit_metrics.sim.list)
circuit_metrics.sim.list$S1
s1 <- circuit_metrics.sim.list$S1
View(s1)
remove(list = ls())
source('./functions.R')
datadir <- './results/'
outdir <- './rankedCircuits.acc.flex/'
dir.create(outdir)
circuit_metrics.sim.list <- readRDS(file = paste0(datadir,  './circuit_metrics.sim.list.rds'))
names(circuit_metrics.sim.list)
circuit_metrics.sim.sorted <- list()
for(sample_name in names(circuit_metrics.sim.list)){
print(sample_name)
circuit_metrics.sim <- circuit_metrics.sim.list[[sample_name]]
#circuit_metrics.sim.s <- sortByTwoIndices(circuit_metrics.sim)
#circuit_metrics.sim.sorted[[sample_name]]  <- sortByTwoIndices(circuit_metrics.sim.list[[sample_name]])
circuit_metrics.sim.s <- sortByTwoIndices.acc_and_flex(circuit_metrics.sim)
circuit_metrics.sim.sorted[[sample_name]]  <- sortByTwoIndices.acc_and_flex(circuit_metrics.sim.list[[sample_name]])
# break()
}
View(circuit_metrics.sim.s)
remove(list = ls())
source('./functions.R')
datadir <- './results/'
outdir <- './rankedCircuits.acc.flex/'
dir.create(outdir)
circuit_metrics.sim.list <- readRDS(file = paste0(datadir,  './circuit_metrics.sim.list.rds'))
names(circuit_metrics.sim.list)
circuit_metrics.sim.sorted <- list()
for(sample_name in names(circuit_metrics.sim.list)){
print(sample_name)
circuit_metrics.sim <- circuit_metrics.sim.list[[sample_name]]
#circuit_metrics.sim.s <- sortByTwoIndices(circuit_metrics.sim)
#circuit_metrics.sim.sorted[[sample_name]]  <- sortByTwoIndices(circuit_metrics.sim.list[[sample_name]])
circuit_metrics.sim.s <- sortByTwoIndices.acc_and_flex(circuit_metrics.sim)
circuit_metrics.sim.sorted[[sample_name]]  <- sortByTwoIndices.acc_and_flex(circuit_metrics.sim.list[[sample_name]])
# break()
}
names(circuit_metrics.sim.sorted )
circuit_metrics.sim.sorted $S1
circuit_metrics.sim.s <- sortByTwoIndices.acc_and_flex(circuit_metrics.sim)
View(circuit_metrics.sim.s)
