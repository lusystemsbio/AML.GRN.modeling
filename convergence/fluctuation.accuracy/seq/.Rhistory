remove(list = ls())
NUM_CLUSTERS <- 2
NO.TOP.CIRCUITS <- 10
NO.REPEATS <- 2 #1000
library(igraph)
library(NetAct)
library(sRACIPE)
source('../../networks/functions.R')
source('../../../networks/functions.R')
source('../../../networks/heatmapSimilarity.updated.R')
library(dplyr)
outdir <- './results/'
dir.create(outdir)
datadir <- '../../rankings.allCircuits/results/'
circuit_metrics.sim <- read.csv(file = paste0(datadir , "./summary.circuits.sim.sortedByAcc_flex.csv"), row.names = 1)
circuit_metrics.sim <- circuit_metrics.sim[1:NO.TOP.CIRCUITS, ]
coreTFs.list <- readRDS('../../../tfSets/data/coreTFs.rds')
names(coreTFs.list)
targetDB.list <- readRDS('../../../databases/targetDB.list.rds')
names(targetDB.list)
fname.eset.brain_array <- '../../../data.tfs/eset.brain_array.rda'
load(fname.eset.brain_array) # loads object eset.brain_array
fname.de.results <- '../../../data.tfs/de.results.rda'
load(fname.de.results) # loads object de.results
tmp <- read.csv(file = paste0('../../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
accuracy.df <- as.data.frame(matrix(nrow = nrow(circuit_metrics.sim), ncol = NO.REPEATS))
rownames(accuracy.df) <- rownames(circuit_metrics.sim)
circuit_idx <- rownames(circuit_metrics.sim)[1]
fr <- strsplit(circuit_idx, split = '-')[[1]][1]
top.TFs.count <- strsplit(circuit_idx, split = '-')[[1]][2]
coreTFs <- coreTFs.list[[fr]][[top.TFs.count]][['COMB']]
targetDB = targetDB.list[[fr]]
length(coreTFs)
coreTFs <- intersect(coreTFs, names(targetDB))
length(coreTFs)
a = TF_Activity(tfs = coreTFs,
GSDB = targetDB,
eset = eset.brain_array,
DErslt = de.results  #DErslt=de.results$Overall
)
data.REF <- a$all_activities
racipe <- readRDS(file = paste('../../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
data.sim <- assay(racipe,1)
dim(data.sim)
acc.v <- vector(mode = 'numeric', length = NO.REPEATS)
for(i in 1:NO.REPEATS){
print(i)
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
acc.v[i] <-(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
}
acc.v
seq(1,NO.REPEATS)
acc.v <- vapply(seq(1,NO.REPEATS),   hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
acc <- (hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
)
acc.v <- vapply(seq(1,NO.REPEATS),   hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
)
acc.v <- vapply(seq(1,NO.REPEATS),   function(x) { hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])}
)
acc.v <- vapply(seq(1,NO.REPEATS),   function(x) { hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
return(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])}
)
acc.v <- sapply(seq(1,NO.REPEATS),   function(x) { hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
return(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])}
)
acc.v
class(acc.v)
acc.v <- sapply(seq(1,NO.REPEATS),
function(x){
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
return(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
}
)
acc.v
class(acc.v)
accuracy.df[circuit_idx,] <- sapply(seq(1,NO.REPEATS),
function(x){
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
return(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
}
)
View(accuracy.df)
for(circuit_idx in rownames(circuit_metrics.sim)){
#circuit_idx <- rownames(circuit_metrics.sim)[1]
# print(circuit_idx)
# break()
# obtain TF activities using NetAct:
fr <- strsplit(circuit_idx, split = '-')[[1]][1]
top.TFs.count <- strsplit(circuit_idx, split = '-')[[1]][2]
#coreTFs <- coreTFs.list[[top.TFs.count]]
coreTFs <- coreTFs.list[[fr]][[top.TFs.count]][['COMB']]
targetDB = targetDB.list[[fr]]
length(coreTFs)
coreTFs <- intersect(coreTFs, names(targetDB))
length(coreTFs)
a = TF_Activity(tfs = coreTFs,
GSDB = targetDB,
eset = eset.brain_array,
DErslt = de.results  #DErslt=de.results$Overall
)
data.REF <- a$all_activities
# obtain simulated data:
racipe <- readRDS(file = paste('../../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- sracipeNormalize(racipe)
data.sim <- assay(racipe,1)
# calculate similarity between activitites and racipe simulation data:
# acc.v <- vector(mode = 'numeric', length = NO.REPEATS)
# for(i in 1:NO.REPEATS){
#   print(i)
#   hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
#                                  dataSimulation = data.sim,
#                                  returnData = T,
#                                  #nClusters = NUM_CLUSTERS,
#                                  clusterCut = clusterCut.REF)
#   acc.v[i] <-(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
# }
# accuracy.df[circuit_idx,] <- acc.v
accuracy.df[circuit_idx,] <- sapply(seq(1,NO.REPEATS),
function(x){
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = data.sim,
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
return(hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
}
)
write.csv(accuracy.df, file = paste0(outdir, "./accuracy.dist.csv"),
row.names = T, quote = F)
#break()
}
