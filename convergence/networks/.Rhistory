remove(list = ls())
NO_SAMPLES <- 2 #10
SAMPLE_SIZE <- 100 #10000
NO_TOP_CIRCUITS <- 10
PERCENT_REDUCTION <- 95
library(sRACIPE)
source('../../networks/functions.R')
source('../../networks/heatmapSimilarity.updated.R')
outdir <- './results/'
dir.create(outdir)
circuit_metrics.sim.sorted <- read.csv('../rankings.mean_acc/results/summary.circuits.sim.sortedByAcc_flex.csv', row.names=1)
circuits <- rownames(circuit_metrics.sim.sorted)[1:(NO_TOP_CIRCUITS)]
names(circuits) <- circuits
circuits
circuit_metrics <- read.csv(file = '../../networks/circuits/summary.circuits.csv', row.names = 1)
circuit_metrics.sim <- circuit_metrics[circuits, ]
tmp <- read.csv(file = paste0('../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
clusterCut.REF <- as.integer(tmp$x)
names(clusterCut.REF) <- as.character(rownames(tmp))
fname.TFactivities <- '../../networks/circuits/circuit_TFactivities.rds'
TF_activities <- readRDS(fname.TFactivities)
circuit_metrics.sim.list <- list()
SAMPLE_NO <- 1:NO_SAMPLES[1]
sample_name <- paste0('S', SAMPLE_NO)
accuracy.avgDist <- circuit_metrics.sim
circuit_idx <- names(circuits)[1]
for(circuit_idx in names(circuits)){
print(circuit_idx)
data.REF <-  TF_activities[[circuit_idx]]
# obtain simulated data:
racipe <- readRDS(file = paste('./circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
#racipe <- racipe[, start.idx:end.idx]
racipe <- racipe[, sample(ncol(racipe), SAMPLE_SIZE)]
racipe <- sracipeNormalize(racipe)
# calculate similarity between activitites and racipe simulation data:
hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
dataSimulation = assay(racipe,1),
returnData = T,
#nClusters = NUM_CLUSTERS,
clusterCut = clusterCut.REF)
accuracy.avgDist[circuit_idx, "ClusterA"] <- hS$simulated.cluster.freq[2]
accuracy.avgDist[circuit_idx, "ClusterB"] <- hS$simulated.cluster.freq[3]
accuracy.avgDist[circuit_idx,"KLdist"] <- hS$KL
accuracy.avgDist[circuit_idx,"ClusterA2"] <- hS$cluster.similarity[2]
accuracy.avgDist[circuit_idx,"ClusterB2"] <- hS$cluster.similarity[3]
accuracy.avgDist[circuit_idx, "Accuracy"] <- (hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3])
accuracy.avgDist[circuit_idx, "AvgDist"] <- hS$AvgDist
# calculate circuit flexibility by KD subsetting
racipe.kd <- sRACIPE::sracipeKnockDown(racipe,
plotToFile = FALSE,
plotBarPlot = FALSE, #TRUE,
plotHeatmap = FALSE,
reduceProduction = (100-PERCENT_REDUCTION)
)
flexibility_as_avg.dist <- calDistance(racipe.kd)
accuracy.avgDist[circuit_idx, "flexibility"] <- flexibility_as_avg.dist
}
flexibility_as_avg.dist
calDistance(racipe.kd)
class(racipe.kd)
racipe.kd
racipe.kd
class(racipe.kd)
racipe.kd$WT
racipe.kd
prop.wt <- racipe.kd$WT
prop.wt
names(racipe.kd)
racipe.kd
unlist(racipe.kd)
racipe.kd
racipe.kd$STAT6
racipe.kd$STAT1
racipe.kd$STAT3
dist.df <- as.data.frame(matrix(nrow = (length(racipe.kd)-1), ncol = 2))
colnames(dist.df) <- c('tf', 'dist')
View(dist.df)
rownames(dist.df) <- names(racipe.kd)[2:length(racipe.kd)]
for(tf in names(racipe.kd)[2:length(racipe.kd)]){
#print(tf)
prop.kd <- racipe.kd[[tf]]
d <- sqrt((as.numeric(prop.wt[1])-as.numeric(prop.kd[1]))^2 +
(as.numeric(prop.wt[2])-as.numeric(prop.kd[2]))^2)
dist.df[tf,] <- c(tf, d)
#break()
}
avg.dist <- sum(as.numeric((dist.df$dist)))/length(dist.df$dist)
avg.dist
racipe <- readRDS(file = paste('./circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
racipe <- racipe[, sample(ncol(racipe), SAMPLE_SIZE)]
dim(racipe)
racipe <- readRDS(file = paste('./circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = ''))
dim(racipe)
racipe <- racipe[, sample(ncol(racipe), SAMPLE_SIZE)]
dim(racipe)
remove(list = ls())
NO_TOP_CIRCUITS <- 10
NO_SAMPLES_PER_CIRCUIT <- 10
outdir <- paste('./figs.TOP', NO_TOP_CIRCUITS, '/', sep = '')
dir.create(outdir)
source('../functions.R')
library(reshape2)
library(gridExtra)
library(ggplot2)
top.circuit_id.list <- list()
metric.top_circuits.list <- list()
fname.input <- paste('./rankedCircuits.acc.flex/', 'metric.comb.sorted.csv', sep = '')
print(fname.input)
metric.comb <- read.csv(file = fname.input, row.names = 1)
metric.top_circuits <- metric.comb[1:NO_TOP_CIRCUITS, 1:NO_SAMPLES_PER_CIRCUIT]
top.circuit_id.list[['10K']] <- rownames(metric.top_circuits)
metric.top_circuits.list[['10K']] <- metric.top_circuits
mapping_circuit_ids <- create_circuit_id_2_name_mapping(top.circuit_id.list)
fname.out <- paste(outdir, 'mappings.circuit_id_vs_circuit_name.csv' ,sep = '')
write.csv(mapping_circuit_ids, file = fname.out, row.names = F)
DOT.SIZE <- 0.7
SIZE.TICK_LABEL <- 12
dotplots_by_samplSize <- list()
sampleSize <- names(metric.top_circuits.list)[1]
print(sampleSize)
metric.top_circuits <- metric.top_circuits.list[[sampleSize]]
circuit_ids <- rownames(metric.top_circuits)
circuit_ids
circuit_names <- sapply(circuit_ids, function(circuit_id)
as.character(mapping_circuit_ids$circuit_name[mapping_circuit_ids$circuit_id %in% circuit_id])
)
rownames(metric.top_circuits) <- circuit_names
metric.top_circuits.tmp <-as.data.frame(cbind(rownames(metric.top_circuits),
metric.top_circuits))
colnames(metric.top_circuits.tmp) <- c('circuits',
colnames(metric.top_circuits))
class(metric.top_circuits.tmp$circuits)
metric.top_circuits.tmp$circuits <- factor(metric.top_circuits.tmp$circuits,
levels = metric.top_circuits.tmp$circuits)
metric.top_circuits.m <- melt(metric.top_circuits.tmp, id=c("circuits"))
class(metric.top_circuits.m$value)
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 20) #ylim(0, 25)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p1
p2
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p1
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(1, 20) #ylim(0, 25)
p1
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 30) #ylim(0, 25)
p1
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 40) #ylim(0, 25)
p1
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 50) #ylim(0, 25)
p1
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 60) #ylim(0, 25)
p1
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 70) #ylim(0, 25)
p1
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 65) #ylim(0, 25)
p1
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p2
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p2
p3
View(metric.top_circuits)
NO_SAMPLES_PER_CIRCUIT <- 30 #10
outdir <- paste('./figs.TOP', NO_TOP_CIRCUITS, '/', sep = '')
dir.create(outdir)
source('../functions.R')
library(reshape2)
library(gridExtra)
library(ggplot2)
top.circuit_id.list <- list()
metric.top_circuits.list <- list()
fname.input <- paste('./rankedCircuits.acc.flex/', 'metric.comb.sorted.csv', sep = '')
print(fname.input)
metric.comb <- read.csv(file = fname.input, row.names = 1)
metric.top_circuits <- metric.comb[1:NO_TOP_CIRCUITS, 1:NO_SAMPLES_PER_CIRCUIT]
top.circuit_id.list[['10K']] <- rownames(metric.top_circuits)
metric.top_circuits.list[['10K']] <- metric.top_circuits
mapping_circuit_ids <- create_circuit_id_2_name_mapping(top.circuit_id.list)
fname.out <- paste(outdir, 'mappings.circuit_id_vs_circuit_name.csv' ,sep = '')
write.csv(mapping_circuit_ids, file = fname.out, row.names = F)
DOT.SIZE <- 0.7
SIZE.TICK_LABEL <- 12
dotplots_by_samplSize <- list()
sampleSize <- names(metric.top_circuits.list)[1]
print(sampleSize)
metric.top_circuits <- metric.top_circuits.list[[sampleSize]]
circuit_ids <- rownames(metric.top_circuits)
circuit_ids
circuit_names <- sapply(circuit_ids, function(circuit_id)
as.character(mapping_circuit_ids$circuit_name[mapping_circuit_ids$circuit_id %in% circuit_id])
)
rownames(metric.top_circuits) <- circuit_names
metric.top_circuits.tmp <-as.data.frame(cbind(rownames(metric.top_circuits),
metric.top_circuits))
colnames(metric.top_circuits.tmp) <- c('circuits',
colnames(metric.top_circuits))
class(metric.top_circuits.tmp$circuits)
metric.top_circuits.tmp$circuits <- factor(metric.top_circuits.tmp$circuits,
levels = metric.top_circuits.tmp$circuits)
metric.top_circuits.m <- melt(metric.top_circuits.tmp, id=c("circuits"))
class(metric.top_circuits.m$value)
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 65) #ylim(0, 25)
p1
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p2
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
class(mean_sdl)
p3
p2
p3 <- p3 + ggtitle(sampleSize) + theme(plot.title = element_text(hjust = 0.5))
p3
p3
p2
p3
p3
p1
p2
p3
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p2
p3
p2
p3
p3
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 70) #ylim(0, 25)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(5, 80) #ylim(0, 25)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(0, 80) #ylim(0, 25)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(4, 65) #ylim(0, 25)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(3, 65) #ylim(0, 25)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(2, 65) #ylim(0, 25)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
p1 <- ggplot(metric.top_circuits.m, aes(x = circuits, y = value)) +
#geom_boxplot()
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(1, 65) #ylim(0, 25)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <-  p2 + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1),
geom="pointrange", color="red", size=0.4)
p3
dotplots_by_samplSize[[sampleSize]] <- p3
p3
WIDTH <- 4
HEIGHT <- 3
fname.out <- paste(outdir, 'dotplot_scores-TOP',
NO_TOP_CIRCUITS, 'circuits-', WIDTH, 'x', HEIGHT, '.pdf',
sep = '')
ggsave(filename = fname.out, dotplots_by_samplSize$`10K`,
width = WIDTH, height = HEIGHT)
WIDTH <- 6
HEIGHT <- 6
fname.out <- paste(outdir, 'dotplot_scores-TOP',
NO_TOP_CIRCUITS, 'circuits-', WIDTH, 'x', HEIGHT, '.pdf',
sep = '')
ggsave(filename = fname.out, dotplots_by_samplSize$`10K`,
width = WIDTH, height = HEIGHT)
SIG.LEVEL_t.test <- 0.05
stats.t.test <- NULL
cnames.stats.t.test <- c('circuits', 'log10Pvalue')
dotplots_t.test_by_samplSize <- list()
count.panel <- 1
for (sampleSize in names(metric.top_circuits.list)){
print(sampleSize)
metric.top_circuits <- metric.top_circuits.list[[sampleSize]]
circuit_ids <- rownames(metric.top_circuits)
circuit_ids
circuit_names <- sapply(circuit_ids, function(circuit_id)
as.character(mapping_circuit_ids$circuit_name[mapping_circuit_ids$circuit_id %in% circuit_id])
)
rownames(metric.top_circuits) <- circuit_names
scores.circuit_1 <- as.numeric(metric.top_circuits[1,])
# perform t test
#----------------
stats.t.test <- NULL
for(circuit_name in rownames(metric.top_circuits)[2:NO_TOP_CIRCUITS]){
print(circuit_name)
scores.circuit_x <- as.numeric(metric.top_circuits[circuit_name,])
t.test.res <- t.test(scores.circuit_1, scores.circuit_x, var.equal = TRUE)
#stats.t.test <- rbind(stats.t.test, c(sampleSize, circuit_name, t.test.res$p.value))
stats.t.test <- rbind(stats.t.test, c(circuit_name,
#t.test.res$p.value,
-log10(t.test.res$p.value)))
colnames(stats.t.test) <- cnames.stats.t.test
}
# Create plots for pvalues from t test
stats.t.test <- as.data.frame(stats.t.test)
#stats.t.test$pvalue <- as.numeric(as.character(stats.t.test$pvalue))
stats.t.test$log10Pvalue <- as.numeric(as.character(stats.t.test$log10Pvalue))
stats.t.test$circuits <- factor(stats.t.test$circuits,
levels = stats.t.test$circuits)
p1 <- ggplot(stats.t.test, aes(x = circuits, y = log10Pvalue)) +
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(0, 8.0) #ylim(0, 8)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <- p2 + geom_hline(yintercept = -log10(SIG.LEVEL_t.test), linetype="longdash")
p4 <- p3 +
ggtitle(sampleSize) + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(breaks=stats.t.test$circuits,
labels= paste('circuit_1 vs ',
as.character(stats.t.test$circuits), sep = ''))
# turn of y axis tick labels for 2nd and subsequent panels
if (count.panel> 1) p4 <- p4 + theme(axis.text.y = element_blank())
dotplots_t.test_by_samplSize[[sampleSize]] <-  p4
count.panel <- count.panel + 1
#break()
}
p4
g.test <- grid.arrange(grobs=dotplots_t.test_by_samplSize, nrow=1)
WIDTH <- 4
HEIGHT <- 3
p1 <- ggplot(stats.t.test, aes(x = circuits, y = log10Pvalue)) +
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(0, 2.0) #ylim(0, 8)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <- p2 + geom_hline(yintercept = -log10(SIG.LEVEL_t.test), linetype="longdash")
p4 <- p3 +
ggtitle(sampleSize) + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(breaks=stats.t.test$circuits,
labels= paste('circuit_1 vs ',
as.character(stats.t.test$circuits), sep = ''))
if (count.panel> 1) p4 <- p4 + theme(axis.text.y = element_blank())
dotplots_t.test_by_samplSize[[sampleSize]] <-  p4
SIG.LEVEL_t.test <- 0.05
stats.t.test <- NULL
cnames.stats.t.test <- c('circuits', 'log10Pvalue')
dotplots_t.test_by_samplSize <- list()
count.panel <- 1
for (sampleSize in names(metric.top_circuits.list)){
print(sampleSize)
metric.top_circuits <- metric.top_circuits.list[[sampleSize]]
circuit_ids <- rownames(metric.top_circuits)
circuit_ids
circuit_names <- sapply(circuit_ids, function(circuit_id)
as.character(mapping_circuit_ids$circuit_name[mapping_circuit_ids$circuit_id %in% circuit_id])
)
rownames(metric.top_circuits) <- circuit_names
scores.circuit_1 <- as.numeric(metric.top_circuits[1,])
# perform t test
#----------------
stats.t.test <- NULL
for(circuit_name in rownames(metric.top_circuits)[2:NO_TOP_CIRCUITS]){
print(circuit_name)
scores.circuit_x <- as.numeric(metric.top_circuits[circuit_name,])
t.test.res <- t.test(scores.circuit_1, scores.circuit_x, var.equal = TRUE)
#stats.t.test <- rbind(stats.t.test, c(sampleSize, circuit_name, t.test.res$p.value))
stats.t.test <- rbind(stats.t.test, c(circuit_name,
#t.test.res$p.value,
-log10(t.test.res$p.value)))
colnames(stats.t.test) <- cnames.stats.t.test
}
# Create plots for pvalues from t test
stats.t.test <- as.data.frame(stats.t.test)
#stats.t.test$pvalue <- as.numeric(as.character(stats.t.test$pvalue))
stats.t.test$log10Pvalue <- as.numeric(as.character(stats.t.test$log10Pvalue))
stats.t.test$circuits <- factor(stats.t.test$circuits,
levels = stats.t.test$circuits)
p1 <- ggplot(stats.t.test, aes(x = circuits, y = log10Pvalue)) +
geom_dotplot(binaxis = 'y', stackdir = 'center',
dotsize=DOT.SIZE) +
ylim(0, 2.0) #ylim(0, 8)
p2 <- p1 + theme(text = element_text(size=SIZE.TICK_LABEL),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.x = element_blank(), axis.title.y = element_blank())
p3 <- p2 + geom_hline(yintercept = -log10(SIG.LEVEL_t.test), linetype="longdash")
p4 <- p3 +
ggtitle(sampleSize) + theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(breaks=stats.t.test$circuits,
labels= paste('circuit_1 vs ',
as.character(stats.t.test$circuits), sep = ''))
# turn of y axis tick labels for 2nd and subsequent panels
if (count.panel> 1) p4 <- p4 + theme(axis.text.y = element_blank())
dotplots_t.test_by_samplSize[[sampleSize]] <-  p4
count.panel <- count.panel + 1
#break()
}
p4
View(stats.t.test)
g.test <- grid.arrange(grobs=dotplots_t.test_by_samplSize, nrow=1)
WIDTH <- 4
HEIGHT <- 3
fname.out <- paste(outdir, 'dotplot_log10Pval-TOP', NO_TOP_CIRCUITS, 'circuits-', WIDTH, 'x', HEIGHT ,'.pdf', sep = '')
ggsave(filename = fname.out, g.test, width = WIDTH, height = HEIGHT)
dotplots.comb <- c(dotplots_by_samplSize, dotplots_t.test_by_samplSize)
g.both <- grid.arrange(grobs=dotplots.comb, nrow=2)
WIDTH <- 6
HEIGHT <- 8
fname.out <- paste(outdir, 'dotplots_scores_and_pvalues-TOP', NO_TOP_CIRCUITS, 'circuits-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
ggsave(filename = fname.out, g.both, width = WIDTH, height = HEIGHT)
