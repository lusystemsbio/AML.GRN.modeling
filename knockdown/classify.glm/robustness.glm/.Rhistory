sum(coef(model)!=0)
x.test <- model.matrix(aml ~., data.test)[,-1]
probabilities <- model %>% predict(newx = x.test, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
observed.classes <- data.test$aml
mean(predicted.classes == observed.classes)
plot(cv.lasso)
ALPHA <- 0.5
set.seed(123)
ALPHA <- 0.5
cv.lasso <- cv.glmnet(x, y, alpha = ALPHA, family = "binomial")
model <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
coef(model)
sum(coef(model)!=0)
x.test <- model.matrix(aml ~., data.test)[,-1]
probabilities <- model %>% predict(newx = x.test, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
observed.classes <- data.test$aml
mean(predicted.classes == observed.classes)
plot(cv.lasso)
set.seed(123)
ALPHA <- 0.8
cv.lasso <- cv.glmnet(x, y, alpha = ALPHA, family = "binomial")
model <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
coef(model)
sum(coef(model)!=0)
x.test <- model.matrix(aml ~., data.test)[,-1]
probabilities <- model %>% predict(newx = x.test, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
observed.classes <- data.test$aml
mean(predicted.classes == observed.classes)
plot(cv.lasso)
par(mfrow=c(2,1))
par(mar=c(2.1, 4.1, 1.1, 1.1)) # bottom, left, top, right
plot(logodd.values)
plot(probabilities)
set.seed(123)
ALPHA <- 1.0
cv.lasso <- cv.glmnet(x, y, alpha = ALPHA, family = "binomial")
model <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
coef(model)
sum(coef(model)!=0)
x.test <- model.matrix(aml ~., data.test)[,-1]
probabilities <- model %>% predict(newx = x.test, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
observed.classes <- data.test$aml
mean(predicted.classes == observed.classes)
plot(cv.lasso)
set.seed(123)
ALPHA <-
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial",
type.measure = "class")
ALPHA <- 0
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial",
type.measure = "class")
set.seed(123)
ALPHA <- 0
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
plot(cv.elastic, xlim=c(-9, 6))
dev.off()
set.seed(123)
ALPHA <- 0
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
plot(cv.elastic, xlim=c(-9, 6))
cv.elastic$lambda.1se
log(cv.elastic$lambda.1se)
plot(model.elastic)
summary(model.elastic)
print(model.elastic)
sum(coef(model.elastic)!=0)
coef.mat <- coef(model.elastic)
sum(coef(model.elastic)!=0)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
genes.nz
length(genes.nz)
cat(genes.nz)
source('~/research/aml.idh/phase.46/knockdown/classify.hS/glmnet.robustness/eval.glmnet.params.R', echo=TRUE)
set.seed(123)
ALPHA <- 0
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
plot(cv.elastic, xlim=c(-9, 6))
cv.elastic$lambda.1se
log(cv.elastic$lambda.1se)
plot(model.elastic)
summary(model.elastic)
print(model.elastic)
set.seed(123)
ALPHA <- 0
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
model.elastic <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
model.elastic <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.elastic$lambda.1se #cv.lasso$lambda.min
)
plot(cv.elastic, xlim=c(-9, 6))
cv.elastic$lambda.1se
log(cv.elastic$lambda.1se)
plot(model.elastic)
summary(model.elastic)
print(model.elastic)
sum(coef(model.elastic)!=0)
coef.mat <- coef(model.elastic)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
genes.nz
length(genes.nz)
cat(genes.nz)
genes0 <- genes.nz
set.seed(123)
ALPHA <- 0.5
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
model.elastic <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.elastic$lambda.1se #cv.lasso$lambda.min
)
plot(cv.elastic, xlim=c(-9, 6))
cv.elastic$lambda.1se
log(cv.elastic$lambda.1se)
plot(model.elastic)
summary(model.elastic)
print(model.elastic)
sum(coef(model.elastic)!=0)
coef.mat <- coef(model.elastic)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
genes.nz
length(genes.nz)
cat(genes.nz)
genes.5 <- genes.nz
set.seed(123)
ALPHA <- 0.8
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
model.elastic <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.elastic$lambda.1se #cv.lasso$lambda.min
)
plot(cv.elastic, xlim=c(-9, 6))
cv.elastic$lambda.1se
log(cv.elastic$lambda.1se)
plot(model.elastic)
summary(model.elastic)
print(model.elastic)
sum(coef(model.elastic)!=0)
coef.mat <- coef(model.elastic)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
genes.nz
length(genes.nz)
cat(genes.nz)
genes.8 <- genes.nz
set.seed(123)
ALPHA <- 1
cv.elastic <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
model.elastic <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.elastic$lambda.1se #cv.lasso$lambda.min
)
plot(cv.elastic, xlim=c(-9, 6))
cv.elastic$lambda.1se
log(cv.elastic$lambda.1se)
plot(model.elastic)
summary(model.elastic)
print(model.elastic)
sum(coef(model.elastic)!=0)
coef.mat <- coef(model.elastic)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
genes.nz
length(genes.nz)
cat(genes.nz)
genes1 <- genes.nz
length(genes0) # 29
length(genes.5) # 18
length(genes.8) # 13
length(genes1) # 9
length(intersect(genes.8, genes.5))
length(intersect(genes.5, genes1))
length(intersect(genes.8, genes1))
cat(sort(setdiff(genes0, genes.5)))
cat(genes0)
cat(sort(genes0))
cat(sort(genes0))
cat(sort(genes0.5))
cat(sort(genes.5))
cat(sort(genes.8))
cat(sort(genes1))
length(sort(genes1))
cat(sort(setdiff(genes0, genes.5)))
length(setdiff(genes0, genes.5))
length(setdiff(genes0, genes.5))
cat(sort(setdiff(genes0, genes.5)))
cat(sort(setdiff(genes.5, genes.8)))
length(setdiff(genes.5, genes.8))
cat(sort(setdiff(genes.5, genes.8)))
length(setdiff(genes.5, genes.8))
cat(sort(setdiff(genes.8, genes1)))
cat(sort(genes1))
cat(sort(genes.8))
cat(sort(genes.5))
cat(sort(genes0))
sample_n(mydata, 3)
set.seed(123)
training.samples <- mydata$aml %>%
createDataPartition(p = 0.8, list = FALSE)
set.seed(123)
cv1 <- cv.glmnet(x, y, alpha = 1, family = "binomial")
cv0 <- cv.glmnet(x, y, alpha = 0, family = "binomial")
cv.5 <- cv.glmnet(x, y, alpha = 0.5, family = "binomial")
cv.8 <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
par(mfrow=c(2,2))
plot(cv1, xlim=c(-9, 6))
plot(cv.5, xlim=c(-9, 6))
plot(cv.8, xlim=c(-9, 6))
plot(cv0, xlim=c(-9, 6))
par(mfrow=c(1,1))
plot(log(cv1$lambda),cv1$cvm,pch=19,col="red",xlab="log(Lambda)",ylab=cv1$name,
xlim = c(-9, 6), ylim = c(0.0, 1.2))
points(log(cv.5$lambda),cv.5$cvm,pch=19,col="grey")
points(log(cv.5$lambda),cv.5$cvm,pch=19,col="green")
points(log(cv0$lambda),cv0$cvm,pch=19,col="blue")
legend("bottomright",legend=c("alpha= 1","alpha= .5", "alpha= .8", "alpha 0"),
pch=19, col=c("red", "grey", "green", "blue"))
par(mfrow=c(2,2))
plot(cv1, xlim=c(-9, 6))
plot(cv.5, xlim=c(-9, 6))
plot(cv.8, xlim=c(-9, 6))
plot(cv0, xlim=c(-9, 6))
set.seed(123)
ALPHA <- 0
cvGlnet <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
model <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cvGlnet$lambda.1se #cv.lasso$lambda.min
)
sum(coef(model)!=0)
coef.mat <- coef(model)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
genes.nz
length(genes.nz)
cat(genes.nz)
genes0 <- genes.nz
ALPHA <- 0.5
cvGlnet <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
model <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cvGlnet$lambda.1se #cv.lasso$lambda.min
)
sum(coef(model)!=0)
coef.mat <- coef(model)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
length(genes.nz)
cat(genes.nz)
genes.5 <- genes.nz
ALPHA <- 0.8
cvGlnet <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
model <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cvGlnet$lambda.1se #cv.lasso$lambda.min
)
sum(coef(model)!=0)
coef.mat <- coef(model)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
length(genes.nz)
cat(genes.nz)
genes.8 <- genes.nz
ALPHA <- 1
cvGlnet <- cv.glmnet(x, y, alpha = ALPHA,
family = "binomial"#, type.measure = "class"
)
model <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cvGlnet$lambda.1se #cv.lasso$lambda.min
)
sum(coef(model)!=0)
coef.mat <- coef(model)
coefs.nz <- labels(which(coef.mat[,"s0"]!=0))
genes.nz <-  coefs.nz[2:length(coefs.nz)]
length(genes.nz)
cat(genes.nz)
genes1 <- genes.nz
cat(sort(genes1))
cat(sort(genes.8))
cat(sort(genes.5))
cat(sort(genes0))
cat(sort(genes1))
probabilities <- model %>% predict(newx = x.test, type = "response")
set.seed(123)
ALPHA <- 1.0
cv.lasso <- cv.glmnet(x, y, alpha = ALPHA, family = "binomial")
model <- glmnet(x, y, alpha = ALPHA, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
coef(model)
sum(coef(model)!=0)
x.test <- model.matrix(aml ~., data.test)[,-1]
probabilities <- model %>% predict(newx = x.test, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
x.classes <- model %>% predict(newx = x.test, type = "class")
observed.classes <- data.test$aml
mean(predicted.classes == observed.classes)
plot(cv.lasso == observed.classes)
plot(x.classes == observed.classes)
mean(x.classes == observed.classes)
mean(predicted.classes == observed.classes)
mean(x.classes == observed.classes)
sum(predicted.classes==x.classes)
length(x.classes)
plot.cv.glmnet
?cv.glmnet
?plot.cv.glmnet
plot.cv.glmnet(model)
glmnet::plot.cv.glmnet(cv.lasso)
plot.cv.glmnet(cv.lasso)
getS3method('plot', 'cv.glmnet')
getS3method('plot')
getS3method('plot')
getS3method('plot', 'cv.glmnet')
getS3method('plot')
getS3method('plot', 'cv.glmnet')
getS3method(cv.glmnet')
getS3method('cv.glmnet')
getS3method('plot', 'cv.glmnet')
glmnet:::plot.cv.glmnet
glmnet:::plot.cv.glmnet
glmnet::plot.cv.glmnet
?glmnet::plot.cv.glmnet
glmnet:::plot.cv.glmnet
glmnet:::plot.cv.glmnet
glmnet:::cv.glmnet
glmnet:::cv.glmnet
summary(model)
model
sum(data.train$==1)
sum(data.train$aml ==1)
sum(data.train$aml ==0)
dum(data.train)
sum(mydata.saved$CLUSTER_NO==1)
sum(mydata.saved$CLUSTER_NO==2)
sum(mydata.saved$CLUSTER_NO==3)
sum(mydata.saved$CLUSTER_NO==3)
sum(mydata.saved$CLUSTER_NO==1)
sum(mydata.saved$CLUSTER_NO==2)
sum(mydata.saved$CLUSTER_NO==3)
cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv1.coef <- cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv1.coef <- cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv1.coef <- cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv0.coef <- cv0$glmnet.fit$beta[, cv0$glmnet.fit$lambda==cv0$lambda.1se]
cv.8.coef <- cv.8$glmnet.fit$beta[, cv.8$glmnet.fit$lambda==cv.8$lambda.1se]
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
library(data.table)
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
source('~/research/aml.idh/phase.46/knockdown/classify.hS/glmnet.robustness/eval.glmnet.params.R', echo=TRUE)
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
cv1.coef <- cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv0.coef <- cv0$glmnet.fit$beta[, cv0$glmnet.fit$lambda==cv0$lambda.1se]
rm(list=ls())
fname_data = "../racipe.wt/data/racipe.models.wt.labeled.csv"
mydata = read.csv(file=fname_data,
header=TRUE)
dim(mydata)
mydata.saved <- mydata
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
colnames(mydata) <- c('aml', colnames(mydata)[2:ncol(mydata)] )
class(mydata$aml)
mydata$aml <- as.numeric(mydata$aml==1)
mydata$aml <- factor(mydata$aml)
class(mydata$aml)
unique(mydata$aml)
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
library(tidyverse)
library(caret)
library(glmnet)
sample_n(mydata, 3)
set.seed(123)
training.samples <- mydata$aml %>%
createDataPartition(p = 0.8, list = FALSE)
data.train <- mydata[training.samples, ]
data.test <- mydata[-training.samples, ]
sum(data.train$aml ==0)
dum(data.train)
sum(mydata.saved$CLUSTER_NO==1)
sum(mydata.saved$CLUSTER_NO==2)
sum(data.train)
dim(data.train)
sum(mydata.saved$CLUSTER_NO==1)
sum(mydata.saved$CLUSTER_NO==2)
sum(mydata.saved$CLUSTER_NO==3)
x <- model.matrix(aml~., data.train)[,-1]
y <- ifelse(data.train$aml == 1, 1, 0)
head(y)
set.seed(123)
cv1 <- cv.glmnet(x, y, alpha = 1, family = "binomial")
cv0 <- cv.glmnet(x, y, alpha = 0, family = "binomial")
cv.5 <- cv.glmnet(x, y, alpha = 0.5, family = "binomial")
cv.8 <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
par(mfrow=c(2,2))
plot(cv1, xlim=c(-9, 6))
plot(cv.5, xlim=c(-9, 6))
plot(cv.8, xlim=c(-9, 6))
plot(cv0, xlim=c(-9, 6))
par(mfrow=c(1,1))
plot(log(cv1$lambda),cv1$cvm,pch=19,col="red",xlab="log(Lambda)",ylab=cv1$name,
xlim = c(-9, 6), ylim = c(0.0, 1.2))
points(log(cv.5$lambda),cv.5$cvm,pch=19,col="grey")
points(log(cv.5$lambda),cv.5$cvm,pch=19,col="green")
points(log(cv0$lambda),cv0$cvm,pch=19,col="blue")
legend("bottomright",legend=c("alpha= 1","alpha= .5", "alpha= .8", "alpha 0"),
pch=19, col=c("red", "grey", "green", "blue"))
cv1.coef <- cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv0.coef <- cv0$glmnet.fit$beta[, cv0$glmnet.fit$lambda==cv0$lambda.1se]
cv.8.coef <- cv.8$glmnet.fit$beta[, cv.8$glmnet.fit$lambda==cv.8$lambda.1se]
library(data.table)
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
cv1.coef <- cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv1.coef <- cv1$glmnet.fit$beta[, cv1$glmnet.fit$lambda==cv1$lambda.1se]
cv0.coef <- cv0$glmnet.fit$beta[, cv0$glmnet.fit$lambda==cv0$lambda.1se]
cv.8.coef <- cv.8$glmnet.fit$beta[, cv.8$glmnet.fit$lambda==cv.8$lambda.1se]
cv1.coef
cv0.coef
cv8.coef
cv.8.coef
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
coef.all <- data.table[lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef]
dim(cv1.coef)
cv1.coef
class(cv1.coef)
length(cv1.coef)
cv.8.coef
length(cv.8.coef)
length(cv0.coef)
?data.table
coef.all <- data.table(lasso=cv1.coef,
elastic_ne=cv.8.coef,
ridge=cv0.coef)
coef.all[, feature := names(cv0.coef)]
to_plot <- melt(coef.all, id.vars = 'feature', variable.name = 'model',
value.name = 'coefficient')
library(ggplot2)
ggplot(to_plot, aes(x=feature, y=coefficient, fill=model)) +
cood_flip() +
geom_bar(stat='identity') +
facet_wrap(~model) + guidies(fill=FALSE)
ggplot(to_plot, aes(x=feature, y=coefficient, fill=model)) +
coord_flip() +
geom_bar(stat='identity') +
facet_wrap(~model) + guidies(fill=FALSE)
ggplot(to_plot, aes(x=feature, y=coefficient, fill=model)) +
coord_flip() +
geom_bar(stat='identity') +
facet_wrap(~model) + guides(fill=FALSE)
coef.all <- data.table(lasso=cv1.coef,
elastic_net=cv.8.coef,
ridge=cv0.coef)
coef.all[, feature := names(cv0.coef)]
to_plot <- melt(coef.all, id.vars = 'feature', variable.name = 'model',
value.name = 'coefficient')
library(ggplot2)
ggplot(to_plot, aes(x=feature, y=coefficient, fill=model)) +
coord_flip() +
geom_bar(stat='identity') +
facet_wrap(~model) + guides(fill=FALSE)
