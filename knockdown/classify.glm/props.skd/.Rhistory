mydata.saved <- mydata
dim(mydata)
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
colnames(mydata) <- c('aml', colnames(mydata)[2:ncol(mydata)] )
class(mydata$aml)
mydata$aml <- as.numeric(mydata$aml==1)
mydata$aml <- factor(mydata$aml)
class(mydata$aml)
unique(mydata$aml)
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(aml~., mydata)[,-1]
y <- ifelse(data.train$aml == 1, 1, 0)
y <- ifelse(mydata$aml == 1, 1, 0)
head(y)
cv.lasso <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
library(glmnet)
cv.lasso <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
fname_data <- '../racipe.wt/data/mean_sd.racipe.models.wt.csv'
mean_sd.wt.df = read.csv(file=fname_data, header=TRUE)
means.wt <- mean_sd.wt.df$mean
names(means.wt) <- mean_sd.wt.df$tf
sds.wt <- mean_sd.wt.df$sd
names(sds.wt) <- mean_sd.wt.df$tf
data.dir.sim <- '../../data.sim/skd/'
fnames <- sort(list.files(data.dir.sim))
fnames
length(fnames)
fname <- fnames
xtract_gene_name <- function(fname){
fname.suffix <- strsplit(fname, split = '-', fixed = TRUE)[[1]][2]
gene_name <- strsplit(fname.suffix, split = '.', fixed = TRUE)[[1]][1]
return(gene_name)
}
gene_names <- sapply(fnames, function(fname) xtract_gene_name(fname))
gene_names
length(gene_names)
cluster_props <- as.data.frame(matrix(nrow = (length(fnames)+1), ncol = NO_CLUSTERS.REF))
rownames(cluster_props) <- c('Untreated', gene_names)
colnames(cluster_props) <- c('Cluster_1', 'Cluster_2')
fname <- fnames[1]
print(fname)
gene_name <- xtract_gene_name(fname)
racipe <- readRDS(file = paste(data.dir.sim, fname, sep = ''))
geneExpression.kd <- assay(racipe,1)
geneExpression.kd <- log2(1+geneExpression.kd)
ndata.kd <- t(normalize_by_wt_mean_and_sd(geneExpression=geneExpression.kd,
means = means.wt, sds=sds.wt))
source('./functions.classify_models.R')
ndata.kd <- t(normalize_by_wt_mean_and_sd(geneExpression=geneExpression.kd,
means = means.wt, sds=sds.wt))
prData.kd <- scale(ndata.kd, pca$center, pca$scale) %*%  pca$rotation
predicted_cluster_IDs <- as.numeric(predict(mymodel, prData.kd)) #predicted_ranks
probabilities <- model %>% predict(newx = ndata.kd)
library(tidyverse)
probabilities <- model %>% predict(newx = ndata.kd)
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
plot(probabilities)
cluster_props[gene_name,] <- c(sum(probabilities==1),
sum(probabilities==0))
ndata.kd.clustered <- cbind(predicted_cluster_IDs, ndata.kd)
ndata.kd.clustered <- cbind(probabilities, ndata.kd)
View(ndata.kd.clustered)
ndata.kd.clustered <- cbind(probabilities, ndata.kd)
View(ndata.kd.clustered)
dim(ndata.kd.clustered)
cluster_props[gene_name,] <- c(sum(predicted.classes==1),
sum(predicted.classes==0))
predicted.classes <- ifelse(probabilities > 0.5, 1, 2)
cluster_props[gene_name,] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
sum(predicted.classes==1)
sum(predicted.classes==2)
ndata.kd.clustered <- cbind(predicted.classes, ndata.kd)
colnames(ndata.kd.clustered) <- c('CLUSTER_NO', colnames(ndata.kd))
View(ndata.kd.clustered)
fname.ndata <- paste(outdir.kd.clustered, 'racipe-', gene_name, '.csv', sep = '')
write.csv(ndata.kd.clustered, fname.ndata, quote = F, row.names = F)
mydata <- mydata.saved
probabilities <- model %>% predict(newx = mydata)
mydata <- mydata.saved
probabilities <- model %>% predict(newx = mydata)
View(mydata)
mydata.saved
View(mydata.saved)
probabilities <- model %>% predict(newx = mydata.saved[, 2:ncol(mydata.saved)])
mydata.saved[, 2:ncol(mydata.saved)]
dim( mydata.saved[, 2:ncol(mydata.saved)])
probabilities <- model %>% predict(newx = mydata.saved[, 2:ncol(mydata.saved)])
View(ndata.kd)
as.matrix(mydata.saved[, 2:ncol(mydata.saved)])
probabilities <- model %>% predict(newx = as.matrix(mydata.saved[, 2:ncol(mydata.saved)]))
predicted.classes <- ifelse(probabilities > 0.5, 1, 2)
cluster_props["Untreated",] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
fname.out <- paste(outdir , 'cluster_props.csv', sep = '')
write.csv(cluster_props, file = fname.out, quote = F)
View(cluster_props)
remove(list = ls())
library(sRACIPE)
library(tidyverse)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
outdir.kd.clustered <- './data.sim.clustered/'
dir.create(outdir.kd.clustered)
source('./functions.classify_models.R')
NO_META_COLS = 1
fname_data <- '../racipe.wt/data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata.saved <- mydata
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
colnames(mydata) <- c('aml', colnames(mydata)[2:ncol(mydata)] )
class(mydata$aml)
mydata$aml <- as.numeric(mydata$aml==1)
mydata$aml <- factor(mydata$aml)
class(mydata$aml)
unique(mydata$aml)
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(aml~., mydata)[,-1]
y <- ifelse(mydata$aml == 1, 1, 0)
head(y)
library(glmnet)
cv.lasso <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
library(nnet)
mymodel <- multinom(out ~ PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8+PC9+PC10,
data = data_training)
fname.out <- paste(outdir, 'nnet_model.rds', sep = '')
fname_data <- '../racipe.wt/data/mean_sd.racipe.models.wt.csv'
mean_sd.wt.df = read.csv(file=fname_data, header=TRUE)
means.wt <- mean_sd.wt.df$mean
names(means.wt) <- mean_sd.wt.df$tf
sds.wt <- mean_sd.wt.df$sd
names(sds.wt) <- mean_sd.wt.df$tf
data.dir.sim <- '../../data.sim/skd/'
fnames <- sort(list.files(data.dir.sim))
fnames
length(fnames)
fname <- fnames
xtract_gene_name <- function(fname){
fname.suffix <- strsplit(fname, split = '-', fixed = TRUE)[[1]][2]
gene_name <- strsplit(fname.suffix, split = '.', fixed = TRUE)[[1]][1]
return(gene_name)
}
gene_names <- sapply(fnames, function(fname) xtract_gene_name(fname))
gene_names
length(gene_names)
cluster_props <- as.data.frame(matrix(nrow = (length(fnames)+1), ncol = NO_CLUSTERS.REF))
rownames(cluster_props) <- c('Untreated', gene_names)
colnames(cluster_props) <- c('Cluster_1', 'Cluster_2')
fname <- fnames[1]
for(fname in fnames){
print(fname)
gene_name <- xtract_gene_name(fname)
racipe <- readRDS(file = paste(data.dir.sim, fname, sep = ''))
geneExpression.kd <- assay(racipe,1)
geneExpression.kd <- log2(1+geneExpression.kd)
ndata.kd <- t(normalize_by_wt_mean_and_sd(geneExpression=geneExpression.kd,
means = means.wt, sds=sds.wt))
probabilities <- model %>% predict(newx = ndata.kd)
predicted.classes <- ifelse(probabilities > 0.5, 1, 2)
# obtain cluster proportions:
cluster_props[gene_name,] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
# save ndata.kd with cluster id attached
ndata.kd.clustered <- cbind(predicted.classes, ndata.kd)
colnames(ndata.kd.clustered) <- c('CLUSTER_NO', colnames(ndata.kd))
fname.ndata <- paste(outdir.kd.clustered, 'racipe-', gene_name, '.csv', sep = '')
write.csv(ndata.kd.clustered, fname.ndata, quote = F, row.names = F)
# break()
}
View(cluster_props)
mydata <- mydata.saved[, 2:ncol(mydata.saved)]
probabilities <- model %>% predict(newx = as.matrix(mydata.saved[, 2:ncol(mydata.saved)]))
predicted.classes <- ifelse(probabilities > 0.5, 1, 2) # WT models
cluster_props["Untreated",] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
fname.out <- paste(outdir , 'cluster_props.csv', sep = '')
write.csv(cluster_props, file = fname.out, quote = F)
NO_META_COLS = 1
fname_data <- '../racipe.wt/data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata.saved <- mydata
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
View(mydata)
dim(mydata)
class(mydata$CLUSTER_NO)
mydata$CLUSTER_NO <- mydata$CLUSTER_NO==1
class(mydata$CLUSTER_NO )
NO_META_COLS = 1
fname_data <- '../racipe.wt/data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata.saved <- mydata
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
class(mydata$CLUSTER_NO)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(aml~., mydata)[,-1]
y <- ifelse(mydata$aml == 1, 1, 0)
head(y)
library(glmnet)
cv.lasso <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
x <- model.matrix(CLUSTER_NO ~., mydata)[,-1]
y <- ifelse(mydata$CLUSTER_NO == 1, 1, 0)
head(y)
library(glmnet)
cv.lasso <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
fname_data <- '../racipe.wt/data/mean_sd.racipe.models.wt.csv'
mean_sd.wt.df = read.csv(file=fname_data, header=TRUE)
means.wt <- mean_sd.wt.df$mean
names(means.wt) <- mean_sd.wt.df$tf
sds.wt <- mean_sd.wt.df$sd
names(sds.wt) <- mean_sd.wt.df$tf
data.dir.sim <- '../../data.sim/skd/'
fnames <- sort(list.files(data.dir.sim))
fnames
length(fnames)
fname <- fnames
xtract_gene_name <- function(fname){
fname.suffix <- strsplit(fname, split = '-', fixed = TRUE)[[1]][2]
gene_name <- strsplit(fname.suffix, split = '.', fixed = TRUE)[[1]][1]
return(gene_name)
}
gene_names <- sapply(fnames, function(fname) xtract_gene_name(fname))
gene_names
length(gene_names)
cluster_props <- as.data.frame(matrix(nrow = (length(fnames)+1), ncol = NO_CLUSTERS.REF))
rownames(cluster_props) <- c('Untreated', gene_names)
colnames(cluster_props) <- c('Cluster_1', 'Cluster_2')
fname <- fnames[1]
for(fname in fnames){
print(fname)
gene_name <- xtract_gene_name(fname)
racipe <- readRDS(file = paste(data.dir.sim, fname, sep = ''))
geneExpression.kd <- assay(racipe,1)
geneExpression.kd <- log2(1+geneExpression.kd)
ndata.kd <- t(normalize_by_wt_mean_and_sd(geneExpression=geneExpression.kd,
means = means.wt, sds=sds.wt))
probabilities <- model %>% predict(newx = ndata.kd)
predicted.classes <- ifelse(probabilities > 0.5, 1, 2)
# obtain cluster proportions:
cluster_props[gene_name,] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
# save ndata.kd with cluster id attached
ndata.kd.clustered <- cbind(predicted.classes, ndata.kd)
colnames(ndata.kd.clustered) <- c('CLUSTER_NO', colnames(ndata.kd))
fname.ndata <- paste(outdir.kd.clustered, 'racipe-', gene_name, '.csv', sep = '')
write.csv(ndata.kd.clustered, fname.ndata, quote = F, row.names = F)
# break()
}
probabilities <- model %>% predict(newx = as.matrix(mydata.saved[, 2:ncol(mydata.saved)]))
predicted.classes <- ifelse(probabilities > 0.5, 1, 2) # WT models
cluster_props["Untreated",] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
fname.out <- paste(outdir , 'cluster_props.csv', sep = '')
write.csv(cluster_props, file = fname.out, quote = F)
remove(list = ls())
library(sRACIPE)
library(tidyverse)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
outdir.kd.clustered <- './data.sim.clustered/'
dir.create(outdir.kd.clustered)
source('./functions.classify_models.R')
# Load training data
#-------------------
NO_META_COLS = 1
fname_data <- '../racipe.wt/data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata.saved <- mydata
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
# randomize data
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(CLUSTER_NO ~., mydata)[,-1]
y <- ifelse(mydata$CLUSTER_NO == 1, 1, 0)
head(y)
library(glmnet)
cv.lasso <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
# Load mean and sd of models (with no knockdown)
#-----------------------------------------------
fname_data <- '../racipe.wt/data/mean_sd.racipe.models.wt.csv'
mean_sd.wt.df = read.csv(file=fname_data, header=TRUE)
means.wt <- mean_sd.wt.df$mean
names(means.wt) <- mean_sd.wt.df$tf
sds.wt <- mean_sd.wt.df$sd
names(sds.wt) <- mean_sd.wt.df$tf
# sum(mean_sd.wt.df$tf==rn)
# Load kd simulations
#--------------------
data.dir.sim <- '../../data.sim/skd/'
fnames <- sort(list.files(data.dir.sim))
fnames
length(fnames)
fname <- fnames
xtract_gene_name <- function(fname){
fname.suffix <- strsplit(fname, split = '-', fixed = TRUE)[[1]][2]
gene_name <- strsplit(fname.suffix, split = '.', fixed = TRUE)[[1]][1]
return(gene_name)
}
gene_names <- sapply(fnames, function(fname) xtract_gene_name(fname))
gene_names
length(gene_names)
#cluster_props <- as.data.frame(matrix(nrow = (length(fnames)+1), ncol = (NO_CLUSTERS.REF+1)))
cluster_props <- as.data.frame(matrix(nrow = (length(fnames)+1), ncol = NO_CLUSTERS.REF))
rownames(cluster_props) <- c('Untreated', gene_names)
colnames(cluster_props) <- c('Cluster_1', 'Cluster_2')
fname <- fnames[1]
for(fname in fnames){
print(fname)
gene_name <- xtract_gene_name(fname)
racipe <- readRDS(file = paste(data.dir.sim, fname, sep = ''))
geneExpression.kd <- assay(racipe,1)
geneExpression.kd <- log2(1+geneExpression.kd)
ndata.kd <- t(normalize_by_wt_mean_and_sd(geneExpression=geneExpression.kd,
means = means.wt, sds=sds.wt))
probabilities <- model %>% predict(newx = ndata.kd)
predicted.classes <- ifelse(probabilities > 0.5, 1, 2)
# obtain cluster proportions:
cluster_props[gene_name,] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
# save ndata.kd with cluster id attached
ndata.kd.clustered <- cbind(predicted.classes, ndata.kd)
colnames(ndata.kd.clustered) <- c('CLUSTER_NO', colnames(ndata.kd))
fname.ndata <- paste(outdir.kd.clustered, 'racipe-', gene_name, '.csv', sep = '')
write.csv(ndata.kd.clustered, fname.ndata, quote = F, row.names = F)
# break()
}
# Calculate cluster proportions for WT models using nnet preditor
#-----------------------------------------------------------------
probabilities <- model %>% predict(newx = as.matrix(mydata.saved[, 2:ncol(mydata.saved)]))
predicted.classes <- ifelse(probabilities > 0.5, 1, 2) # WT models
cluster_props["Untreated",] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
fname.out <- paste(outdir , 'cluster_props.csv', sep = '')
write.csv(cluster_props, file = fname.out, quote = F)
View(mydata)
View(mydata.saved)
remove(list = ls())
library(sRACIPE)
library(tidyverse)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
outdir.kd.clustered <- './data.sim.clustered/'
dir.create(outdir.kd.clustered)
source('./functions.classify_models.R')
NO_META_COLS = 1
fname_data <- '../racipe.wt/data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata.saved <- mydata
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(CLUSTER_NO ~., mydata)[,-1]
y <- ifelse(mydata$CLUSTER_NO == 1, 1, 0)
head(y)
library(glmnet)
cv.lasso <- cv.glmnet(x, y, alpha = 0.8, family = "binomial")
model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.1se #cv.lasso$lambda.min
)
fname_data <- '../racipe.wt/data/mean_sd.racipe.models.wt.csv'
mean_sd.wt.df = read.csv(file=fname_data, header=TRUE)
means.wt <- mean_sd.wt.df$mean
names(means.wt) <- mean_sd.wt.df$tf
sds.wt <- mean_sd.wt.df$sd
names(sds.wt) <- mean_sd.wt.df$tf
data.dir.sim <- '../../data.sim/skd/'
fnames <- sort(list.files(data.dir.sim))
fnames
length(fnames)
fname <- fnames
xtract_gene_name <- function(fname){
fname.suffix <- strsplit(fname, split = '-', fixed = TRUE)[[1]][2]
gene_name <- strsplit(fname.suffix, split = '.', fixed = TRUE)[[1]][1]
return(gene_name)
}
gene_names <- sapply(fnames, function(fname) xtract_gene_name(fname))
gene_names
length(gene_names)
cluster_props <- as.data.frame(matrix(nrow = (length(fnames)+1), ncol = NO_CLUSTERS.REF))
rownames(cluster_props) <- c('Untreated', gene_names)
colnames(cluster_props) <- c('Cluster_1', 'Cluster_2')
fname <- fnames[1]
for(fname in fnames){
print(fname)
gene_name <- xtract_gene_name(fname)
racipe <- readRDS(file = paste(data.dir.sim, fname, sep = ''))
geneExpression.kd <- assay(racipe,1)
geneExpression.kd <- log2(1+geneExpression.kd)
ndata.kd <- t(normalize_by_wt_mean_and_sd(geneExpression=geneExpression.kd,
means = means.wt, sds=sds.wt))
probabilities <- model %>% predict(newx = ndata.kd)
predicted.classes <- ifelse(probabilities > 0.5, 1, 2)
# obtain cluster proportions:
cluster_props[gene_name,] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
# save ndata.kd with cluster id attached
ndata.kd.clustered <- cbind(predicted.classes, ndata.kd)
colnames(ndata.kd.clustered) <- c('CLUSTER_NO', colnames(ndata.kd))
fname.ndata <- paste(outdir.kd.clustered, 'racipe-', gene_name, '.csv', sep = '')
write.csv(ndata.kd.clustered, fname.ndata, quote = F, row.names = F)
# break()
}
probabilities <- model %>% predict(newx = as.matrix(mydata.saved[, 2:ncol(mydata.saved)]))
predicted.classes <- ifelse(probabilities > 0.5, 1, 2) # WT models
cluster_props["Untreated",] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
fname.out <- paste(outdir , 'cluster_props.csv', sep = '')
write.csv(cluster_props, file = fname.out, quote = F)
fname <- '../racipe.wt/data/model.glmnet.rds'
model <- readRDS('../racipe.wt/data/model.glmnet.rds')
names(model)
getwd()
remove(list = ls())
library(sRACIPE)
library(tidyverse)
library(glmnet)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
outdir.kd.clustered <- './data.sim.clustered/'
dir.create(outdir.kd.clustered)
source('./functions.classify_models.R')
model <- readRDS('../racipe.wt/data/model.glmnet.rds')
NO_META_COLS = 1
fname_data <- '../racipe.wt/data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
fname_data <- '../racipe.wt/data/mean_sd.racipe.models.wt.csv'
mean_sd.wt.df = read.csv(file=fname_data, header=TRUE)
means.wt <- mean_sd.wt.df$mean
names(means.wt) <- mean_sd.wt.df$tf
sds.wt <- mean_sd.wt.df$sd
names(sds.wt) <- mean_sd.wt.df$tf
data.dir.sim <- '../../data.sim/skd/'
fnames <- sort(list.files(data.dir.sim))
fnames
length(fnames)
fname <- fnames
xtract_gene_name <- function(fname){
fname.suffix <- strsplit(fname, split = '-', fixed = TRUE)[[1]][2]
gene_name <- strsplit(fname.suffix, split = '.', fixed = TRUE)[[1]][1]
return(gene_name)
}
gene_names <- sapply(fnames, function(fname) xtract_gene_name(fname))
gene_names
length(gene_names)
cluster_props <- as.data.frame(matrix(nrow = (length(fnames)+1), ncol = NO_CLUSTERS.REF))
rownames(cluster_props) <- c('Untreated', gene_names)
colnames(cluster_props) <- c('Cluster_1', 'Cluster_2')
fname <- fnames[1]
for(fname in fnames){
print(fname)
gene_name <- xtract_gene_name(fname)
racipe <- readRDS(file = paste(data.dir.sim, fname, sep = ''))
geneExpression.kd <- assay(racipe,1)
geneExpression.kd <- log2(1+geneExpression.kd)
ndata.kd <- t(normalize_by_wt_mean_and_sd(geneExpression=geneExpression.kd,
means = means.wt, sds=sds.wt))
probabilities <- model %>% predict(newx = ndata.kd, type='response')
predicted.classes <- ifelse(probabilities > 0.5, 1, 2)
# obtain cluster proportions:
cluster_props[gene_name,] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
# save ndata.kd with cluster id attached
ndata.kd.clustered <- cbind(predicted.classes, ndata.kd)
colnames(ndata.kd.clustered) <- c('CLUSTER_NO', colnames(ndata.kd))
fname.ndata <- paste(outdir.kd.clustered, 'racipe-', gene_name, '.csv', sep = '')
write.csv(ndata.kd.clustered, fname.ndata, quote = F, row.names = F)
# break()
}
probabilities <- model %>% predict(newx = as.matrix(mydata[, 2:ncol(mydata)]), type='response')
predicted.classes <- ifelse(probabilities > 0.5, 1, 2) # WT models
cluster_props["Untreated",] <- c(sum(predicted.classes==1),
sum(predicted.classes==2))
View(cluster_props)
