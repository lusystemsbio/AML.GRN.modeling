normalize_by_wt_mean_and_sd <- function(geneExpression, means, sds){
geneExpression <- sweep(geneExpression, 1, means, FUN = "-")
geneExpression <- sweep(geneExpression, 1, sds, FUN = "/")
return(geneExpression)
}
ndata <- normalize_by_wt_mean_and_sd(geneExpression=geneExpression,
means=means,
sds=sds)
pca.sim <- prcomp(t(ndata))
plot(pca.sim$x[,1], pca.sim$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
# main='data: models (Untreated)   dist: Euclidean',
main='Models: untreated',
col='gray', pch=19, cex=0.1, xlab='PC1', ylab='PC2')
plot(pca.hS$x[,1], pca.hS$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
# main='data: models (Untreated)   dist: Euclidean',
main='Models: untreated',
col='gray', pch=19, cex=0.1, xlab='PC1', ylab='PC2')
hS.dir <- '../../networks/circuits.hS/'
fname.hS <- paste(hS.dir, 'hS_', circuit_idx, '.rds', sep = '')
fname.hS
hS <- readRDS(file = fname.hS)
hS$AvgDist
hS$simulated.cluster.freq
hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3]
hS$KL
data.sim.hS <- t(hS$dataSimulation)
dim(data.sim.hS)
pca.hS <- prcomp(data.sim.hS)
plot(pca.hS$x[,1], pca.hS$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
# main='data: models (Untreated)   dist: Euclidean',
main='Models: untreated',
col='gray', pch=19, cex=0.1, xlab='PC1', ylab='PC2')
plot(pca.sim$x[,1], pca.sim$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
# main='data: models (Untreated)   dist: Euclidean',
main='Models: untreated',
col='gray', pch=19, cex=0.1, xlab='PC1', ylab='PC2')
cor(pca.hS$x[,1], pca.sim$x[,1])
cor(pca.hS$x[,2], pca.sim$x[,2])
plot(pca.hS$x[,1)
plot(pca.hS$x[,1])
plot(pca.sim$x[,1])
plot(pca.hS$x[,1])
plot(pca.sim$x[,1])
plot(pca.hS$x[,1])
plot(pca.sim$x[,1])
plot(sort(pca.hS$x[,1]))
plot(sort(pca.sim$x[,1]) )
plot(sort(pca.sim$x[,1]) )
cor(sort(pca.hS$x[,1]), sort(pca.sim$x[,1]))
remove(list = ls())
circuit_idx <- '0.09-32-0.85'
racipe <- readRDS(file = paste('../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = '') )
geneExpression <- assay(racipe,1)
geneExpression <- log2(1+geneExpression)
means <- rowMeans(geneExpression)
sds <-  apply(geneExpression, 1, sd)
mean_sd.df <- cbind(names(means), means, sds)
colnames(mean_sd.df) <- c('tf' ,'mean', 'sd')
fname.out <- paste(datadir, 'mean_sd.racipe.models.wt.csv', sep='')
datadir <- './data/'
dir.create(datadir)
mean_sd.df <- cbind(names(means), means, sds)
colnames(mean_sd.df) <- c('tf' ,'mean', 'sd')
fname.out <- paste(datadir, 'mean_sd.racipe.models.wt.csv', sep='')
write.csv(mean_sd.df, file = fname.out, quote = F, row.names = FALSE)
#!/usr/bin/env Rscript
remove(list = ls())
library(sRACIPE)
library(NetAct)
# source('../heatmapSimilarity.updated.R')
# source('../functions.R')
library(gplots)
# Constants
#----------
circuit_idx <- '0.09-32-0.85'
NO_MODELS <- 10000
# input directory for hS objects obtained from cal.metrics.sim_circuits.R
hS.dir <- '../../networks/circuits.hS/'
outdir <- './data/'
dir.create(outdir)
# Explore one selected circuit
#-----------------------------
racipe <- readRDS(file = paste('../../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = '') )
names(racipe)
length(names(racipe))
# Plot circuit
#-------------
#sRACIPE::sracipePlotCircuit(racipe, plotToFile = F)
#sRACIPE:: sracipePlotCircuit(racipe, plotToFile = T)
class(racipe)
names(racipe)
assays(racipe)
circuit_tpo <- sracipeCircuit(racipe)
length(unique(sort(c(circuit_tpo$Source, circuit_tpo$Target)) ))
# Save the circuit
#-----------------
outdir <- './data/'
fname.out <- paste(outdir, 'circuit-', circuit_idx, '.tpo' ,sep = '')
write.table(circuit_tpo, file = fname.out, sep = '\t', quote = F, row.names = F)
# extract TFs in the network
#---------------------------
TFs_in_circuit <- union(circuit_tpo$Source, circuit_tpo$Target)
length(TFs_in_circuit)
fname.out <- paste(outdir, 'TFs-', circuit_idx, '.txt' ,sep = '')
write.table(TFs_in_circuit, file = fname.out, sep = '\t', quote = F, row.names = F)
# Load heatmap similarity object
#-------------------------------
fname.hS <- paste(hS.dir, 'hS_', circuit_idx, '.rds', sep = '')
fname.hS
hS <- readRDS(file = fname.hS)
hS$AvgDist
hS$simulated.cluster.freq
hS$simulated.cluster.freq[2] + hS$simulated.cluster.freq[3]
hS$KL
hS$simulated.cluster.freq
hS$simulated.cluster.freq * NO_MODELS
sum(hS$simulated.cluster.freq * NO_MODELS)
# Save simulation data with cluster information
dim(hS$dataSimulation)
data.sim <- t(hS$dataSimulation)
dim(data.sim)
cluster.labels <- c(rep('1', hS$simulated.cluster.freq[2]*NO_MODELS),
rep('2', hS$simulated.cluster.freq[3]*NO_MODELS),
rep('3', (as.numeric(hS$simulated.cluster.freq[1]*NO_MODELS))+1))
length(cluster.labels)
sum(cluster.labels=='3') # 642 - Hybrid
sum(cluster.labels=='1') # 2443 - AML
sum(cluster.labels=='2') # 6915 - Untreated
data.sim.labeled <- cbind(cluster.labels, data.sim)
colnames(data.sim.labeled) <- c('CLUSTER_NO', colnames(data.sim))
fname.out <- paste(outdir, 'racipe.models.wt.labeled.csv', sep = '')
write.csv(data.sim.labeled, fname.out, row.names = FALSE, quote = F)
length(cluster.labels)
sum(cluster.labels=='3') # 642 - Hybrid
length(cluster.labels)
sum(cluster.labels=='3') # 642 - Hybrid
sum(cluster.labels=='1') # 2443 - AML
sum(cluster.labels=='2') # 6915 - Untreated
data.sim.labeled <- cbind(cluster.labels, data.sim)
datadir <- './data/'
fname <- paste(datadir, 'mean_sd.racipe.models.wt.csv', sep='')
mean_sd.df <- read.csv(fname)
View(mean_sd.df)
ndata.df <- read.csv(fname)
View(ndata.df)
fname <- paste(datadir, 'mean_sd.racipe.models.wt.csv', sep='')
mean_sd.df <- read.csv(fname)
fname <- paste(datadir, 'racipe.models.wt.labeled.csv', sep='')
ndata.df <- read.csv(fname)
data.df <- as.data.frame(matrix(nrow = nrow(ndata.df), ncol = ncol(ndata.df)))
View(data.df)
for(gname in colnames(ndata.df)[2:ncol(ndata.df)]){
print(gname)
}
col.no <- 1
colnames(data.df) <- ncol(ndata.df)
colnames(data.df) <- colnames(ndata.df)
mean_sd.df <- read.csv(fname, row.names = 1)
View(mean_sd.df)
fname <- paste(datadir, 'mean_sd.racipe.models.wt.csv', sep='')
mean_sd.df <- read.csv(fname, row.names = 1)
col.no <- 1
for(gname in colnames(ndata.df)[2:ncol(ndata.df)]){
print(gname)
data.df[, gname] <- ndata.df[, gname] * mean_sd.df[gname, sd] + mean_sd.df[gname, mean]
break()
}
mean_sd.df[gname, sd]
mean_sd.df[gname, "sd"]
mean_sd.df[gname, "mean"]
col.no <- 1
for(gname in colnames(ndata.df)[2:ncol(ndata.df)]){
print(gname)
data.df[, gname] <- ndata.df[, gname] * mean_sd.df[gname, "sd"] + mean_sd.df[gname, "mean"]
break()
}
for(gname in colnames(ndata.df)[2:ncol(ndata.df)]){
print(gname)
data.df[, gname] <- ndata.df[, gname] * mean_sd.df[gname, "sd"] + mean_sd.df[gname, "mean"]
#break()
}
data.df$CLUSTER_NO <- ndata.df$CLUSTER_NO
fname.out <- paste(outdir, 'racipe.models.unnormalized.csv', sep = '')
fname.out <- paste(datadir, 'racipe.models.unnormalized.csv', sep = '')
write.csv(data.sim.labeled, fname.out, row.names = FALSE, quote = F)
write.csv(data.df, fname.out, row.names = FALSE, quote = F)
remove(list = ls())
remove(list = ls())
library(glmnet)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
NO_META_COLS = 1
fname_data <- './data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(CLUSTER_NO ~., mydata)[,-1]
y <- ifelse(mydata$CLUSTER_NO == 1, 1, 0)
head(y)
?cv.glmne
library(glmnet)
?cv.glmnet
cv.glmnet.obj <- cv.glmnet(x, y, alpha = 1.0, family = "binomial")
model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.glmnet.obj$lambda.1se #cv.glmnet.obj$lambda.min
)
fname.out <- paste(outdir, 'cv.lasso.rds', sep = '')
fname.out <- paste(outdir, 'cv.glmnet.obj.rds', sep = '')
saveRDS(cv.glmnet.obj, file = fname.out)
cv.glmnet.obj <- cv.glmnet(x, y, alpha = 1.0, family = "binomial")
cv.glmnet.obj <- cv.glmnet(x, y, alpha = 1.0, family = "binomial")
glmnet.model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.glmnet.obj$lambda.1se #cv.glmnet.obj$lambda.min
)
fname.out <- paste(outdir, 'cv.glmnet.obj.rds', sep = '')
saveRDS(cv.glmnet.obj, file = fname.out)
fname.out <- paste(outdir, 'glmnet.model.rds', sep = '')
saveRDS(glmnet.model, file = fname.out)
#!/usr/bin/env Rscript
remove(list = ls())
# library(tidyverse)
library(glmnet)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
# Load training data
#-------------------
NO_META_COLS = 1
fname_data <- './data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
# randomize data
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(CLUSTER_NO ~., mydata)[,-1]
y <- ifelse(mydata$CLUSTER_NO == 1, 1, 0)
head(y)
cv.glmnet.obj <- cv.glmnet(x, y, alpha = 1.0, family = "binomial")
glmnet.model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.glmnet.obj$lambda.1se #cv.glmnet.obj$lambda.min
)
fname.out <- paste(outdir, 'cv.glmnet.obj.rds', sep = '')
saveRDS(cv.glmnet.obj, file = fname.out)
fname.out <- paste(outdir, 'glmnet.model.rds', sep = '')
saveRDS(glmnet.model, file = fname.out)
#!/usr/bin/env Rscript
remove(list = ls())
# library(tidyverse)
library(glmnet)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
# Load training data
#-------------------
NO_META_COLS = 1
fname_data <- './data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
# randomize data
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(CLUSTER_NO ~., mydata)[,-1]
y <- ifelse(mydata$CLUSTER_NO == 1, 1, 0)
head(y)
cv.glmnet.obj <- cv.glmnet(x, y, alpha = 1.0, family = "binomial")
glmnet.model <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.glmnet.obj$lambda.1se #cv.glmnet.obj$lambda.min
)
fname.out <- paste(outdir, 'cv.glmnet.obj.rds', sep = '')
saveRDS(cv.glmnet.obj, file = fname.out)
fname.out <- paste(outdir, 'glmnet.model.rds', sep = '')
saveRDS(glmnet.model, file = fname.out)
#!/usr/bin/env Rscript
remove(list = ls())
# library(tidyverse)
library(glmnet)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
# Load training data
#-------------------
NO_META_COLS = 1
fname_data <- './data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
# randomize data
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
x <- model.matrix(CLUSTER_NO ~., mydata)[,-1]
y <- ifelse(mydata$CLUSTER_NO == 1, 1, 0)
head(y)
cv.glmnet.obj <- cv.glmnet(x, y, alpha = 1.0, family = "binomial")
model.glmnet <- glmnet(x, y, alpha = 1, family = "binomial",
lambda = cv.glmnet.obj$lambda.1se #cv.glmnet.obj$lambda.min
)
fname.out <- paste(outdir, 'cv.glmnet.obj.rds', sep = '')
saveRDS(cv.glmnet.obj, file = fname.out)
fname.out <- paste(outdir, 'model.glmnet.rds', sep = '')
saveRDS(model.glmnet, file = fname.out)
remove(list = ls())
library(sRACIPE)
NO_CLUSTERS.REF <- 2
XLIMIT <- c(-11, 5)
YLIMIT <- c(-4, 5)
cluster_names <- c('CL1', 'CL2')
names(cluster_names) <- c('Untreated', 'AML')
color_vector = c("dodgerblue", "red") # CL1, CL2
figdir <- './figs.wt.clusters/'
dir.create(figdir)
source('./functions.classify_models.R')
datadir <- './data/'
NO_META_COLS = 1
fname_data <- '../racipe.wt/data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata.saved <- mydata
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
ndata <- mydata[, (NO_META_COLS+1):ncol(mydata)]
pca <- prcomp(ndata)
eigs <- pca$sdev^2
stat <- rbind(SD = sqrt(eigs),
Proportion = eigs/sum(eigs),
Cumulative = cumsum(eigs)/sum(eigs))
View(mydata)
prData.wt <- scale(mydata[, 2:ncol(mydata)] , pca$center, pca$scale) %*%  pca$rotation
mainstr <- paste(' Models: Untreated' , sep = '')
plot(pca$x[,1], pca$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
main=mainstr, col='gray', pch=19, cex=0.05,
xlab=paste('PC1 (', format(stat[2,1]*100, digits = 5), '%)' , sep = ''),
ylab=paste('PC2 (', format(stat[2,2]*100, digits = 4), '%)' , sep = '')
)
for(cluster.no in 1:NO_CLUSTERS.REF){
prCluster=prData.kd[ndata.kd$CLUSTER_NO==cluster.no,]
if(is.vector(prCluster)) {
points(prCluster[1], prCluster[2], pch=19,cex=0.5, col=color_vector[cluster.no])
}
else{
points(prCluster[,1], prCluster[,2],pch=19,cex=0.5, col=color_vector[cluster.no])
}
# dataEllipse(prCluster[,1], prCluster[,2],
#             levels=c(0.8), add=TRUE, col=color_vector[cluster.no+1],
#             center.pch = 19,center.cex = 1.5, pch=1, cex=0.05, plot.points=TRUE,
#             fill=TRUE, fill.alpha=0.1)
# break()
}
for(cluster.no in 1:NO_CLUSTERS.REF){
prCluster=prData.wt[mydata$CLUSTER_NO==cluster.no,]
if(is.vector(prCluster)) {
points(prCluster[1], prCluster[2], pch=19,cex=0.5, col=color_vector[cluster.no])
}
else{
points(prCluster[,1], prCluster[,2],pch=19,cex=0.5, col=color_vector[cluster.no])
}
# dataEllipse(prCluster[,1], prCluster[,2],
#             levels=c(0.8), add=TRUE, col=color_vector[cluster.no+1],
#             center.pch = 19,center.cex = 1.5, pch=1, cex=0.05, plot.points=TRUE,
#             fill=TRUE, fill.alpha=0.1)
# break()
}
WIDTH <- 3
HEIGHT <- 3
figname <- paste(figdir, 'legend-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
plot(pca$x[,1], pca$x[,2], xlim=XLIMIT, ylim=YLIMIT,
col='white', pch=19, cex=0.005, xlab='PC1', ylab='PC2')
legend(XLIMIT[1], (YLIMIT[2]-1), names(cluster_names), color_vector, bty='n')
mainstr <- paste(' Models: Untreated' , sep = '')
figname <- paste(figdir, 'clusters_on_PCs.wt-', gene_name,'-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
pdf(file = figname, width = WIDTH, height = HEIGHT, paper = 'special')
plot(pca$x[,1], pca$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
main=mainstr, col='gray', pch=19, cex=0.05,
xlab=paste('PC1 (', format(stat[2,1]*100, digits = 5), '%)' , sep = ''),
ylab=paste('PC2 (', format(stat[2,2]*100, digits = 4), '%)' , sep = '')
)
for(cluster.no in 1:NO_CLUSTERS.REF){
prCluster=prData.wt[mydata$CLUSTER_NO==cluster.no,]
if(is.vector(prCluster)) {
points(prCluster[1], prCluster[2], pch=19,cex=0.5, col=color_vector[cluster.no])
}
else{
points(prCluster[,1], prCluster[,2],pch=19,cex=0.5, col=color_vector[cluster.no])
}
}
#legend(-1, (YLIMIT[1]+7), names(cluster_names), color_vector, bty='n')
dev.off()
figname <- paste(figdir, 'clusters_on_PCs.wt-', gene_name,'-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
figname <- paste(figdir, 'clusters_on_PCs.wt-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
pdf(file = figname, width = WIDTH, height = HEIGHT, paper = 'special')
plot(pca$x[,1], pca$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
main=mainstr, col='gray', pch=19, cex=0.05,
xlab=paste('PC1 (', format(stat[2,1]*100, digits = 5), '%)' , sep = ''),
ylab=paste('PC2 (', format(stat[2,2]*100, digits = 4), '%)' , sep = '')
)
for(cluster.no in 1:NO_CLUSTERS.REF){
prCluster=prData.wt[mydata$CLUSTER_NO==cluster.no,]
if(is.vector(prCluster)) {
points(prCluster[1], prCluster[2], pch=19,cex=0.5, col=color_vector[cluster.no])
}
else{
points(prCluster[,1], prCluster[,2],pch=19,cex=0.5, col=color_vector[cluster.no])
}
}
dev.off()
dev.list()
dev.off()
dev.off()
figname <- paste(figdir, 'clusters_on_PCs.wt-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
pdf(file = figname, width = WIDTH, height = HEIGHT, paper = 'special')
plot(pca$x[,1], pca$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
main=mainstr, col='gray', pch=19, cex=0.05,
xlab=paste('PC1 (', format(stat[2,1]*100, digits = 5), '%)' , sep = ''),
ylab=paste('PC2 (', format(stat[2,2]*100, digits = 4), '%)' , sep = '')
)
for(cluster.no in 1:NO_CLUSTERS.REF){
prCluster=prData.wt[mydata$CLUSTER_NO==cluster.no,]
if(is.vector(prCluster)) {
points(prCluster[1], prCluster[2], pch=19,cex=0.5, col=color_vector[cluster.no])
}
else{
points(prCluster[,1], prCluster[,2],pch=19,cex=0.5, col=color_vector[cluster.no])
}
}
#legend(-1, (YLIMIT[1]+7), names(cluster_names), color_vector, bty='n')
dev.off()
WIDTH <- 3
HEIGHT <- 3
figname <- paste(figdir, 'legend-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
pdf(file = figname, width = WIDTH, height = HEIGHT, paper = 'special')
plot(pca$x[,1], pca$x[,2], xlim=XLIMIT, ylim=YLIMIT,
col='white', pch=19, cex=0.005, xlab='PC1', ylab='PC2')
legend(XLIMIT[1], (YLIMIT[2]-1), names(cluster_names), color_vector, bty='n')
dev.off()
WIDTH <- 6
HEIGHT <- 5
figname <- paste(figdir, 'clusters_on_PCs.wt-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
pdf(file = figname, width = WIDTH, height = HEIGHT, paper = 'special')
plot(pca$x[,1], pca$x[,2], #xlim=XLIMIT, ylim=YLIMIT,
main=mainstr, col='gray', pch=19, cex=0.05,
xlab=paste('PC1 (', format(stat[2,1]*100, digits = 5), '%)' , sep = ''),
ylab=paste('PC2 (', format(stat[2,2]*100, digits = 4), '%)' , sep = '')
)
for(cluster.no in 1:NO_CLUSTERS.REF){
prCluster=prData.wt[mydata$CLUSTER_NO==cluster.no,]
if(is.vector(prCluster)) {
points(prCluster[1], prCluster[2], pch=19,cex=0.5, col=color_vector[cluster.no])
}
else{
points(prCluster[,1], prCluster[,2],pch=19,cex=0.5, col=color_vector[cluster.no])
}
}
#legend(-1, (YLIMIT[1]+7), names(cluster_names), color_vector, bty='n')
dev.off()
remove(list = ls())
library(glmnet)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
NO_META_COLS = 1
fname_data <- './data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
remove(list = ls())
library(glmnet)
remove(list = ls())
library(randomForest)
NO_CLUSTERS.REF <- 2 # 3
outdir  <- './data/'
dir.create(outdir )
NO_META_COLS = 1
fname_data <- './data/racipe.models.wt.labeled.csv'
mydata = read.csv(file=fname_data, header=TRUE)
dim(mydata)
mydata <- mydata[mydata$CLUSTER_NO!=3, ]
dim(mydata)
mydata$CLUSTER_NO <- as.numeric(mydata$CLUSTER_NO==1)
mydata$CLUSTER_NO <- factor(mydata$CLUSTER_NO)
unique(mydata$CLUSTER_NO)
set.seed(1)
mydata <- mydata[sample(nrow(mydata)), ]
rf <- randomForest(
CLUSTER_NO ~ .,
data=mydata
)
fname.out <- paste(outdir, 'model.randomForest.rds', sep = '')
saveRDS(rf, file = fname.out)
getwd()
