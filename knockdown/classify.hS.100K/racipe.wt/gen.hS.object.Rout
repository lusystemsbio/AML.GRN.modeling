
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #!/usr/bin/env Rscript
> 
> remove(list = ls()) 
> 
> # PARAMETERS
> 
> # NUM_CLUSTERS: user supplied information about 
> # how many clusters in the data
> NUM_CLUSTERS <- 2
> 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> library(NetAct)
> library(sRACIPE)
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:igraph’:

    normalize, path, union

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians


Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following object is masked from ‘package:igraph’:

    simplify

The following objects are masked from ‘package:base’:

    aperm, apply, rowsum

Loading required package: Rcpp
> source('../../../networks/functions.R')
> source('../../../networks/heatmapSimilarity.updated.R')
> library(dplyr)

Attaching package: ‘dplyr’

The following object is masked from ‘package:matrixStats’:

    count

The following object is masked from ‘package:Biobase’:

    combine

The following objects are masked from ‘package:GenomicRanges’:

    intersect, setdiff, union

The following object is masked from ‘package:GenomeInfoDb’:

    intersect

The following objects are masked from ‘package:IRanges’:

    collapse, desc, intersect, setdiff, slice, union

The following objects are masked from ‘package:S4Vectors’:

    first, intersect, rename, setdiff, setequal, union

The following objects are masked from ‘package:BiocGenerics’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:igraph’:

    as_data_frame, groups, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> outdir.hS <- './data.sim/'
> dir.create(outdir.hS) 
Warning message:
In dir.create(outdir.hS) : './data.sim' already exists
> 
> outdir <- './data.sim/' #'./results/'
> #dir.create(outdir)
> 
> # Load circuit summary
> #-------------------- 
> # circuit_metrics <- read.csv(file = './circuits/summary.circuits.csv', row.names = 1)
> # 
> # # select section of the metrics specific to the simulated circuits:
> # circuit_metrics.sim <- circuit_metrics[!circuit_metrics$DupStatus,]
> # 
> # # Load circuits
> # circuits <- readRDS('./circuits/circuits.uniq.rds')
> # names(circuits)
> # length(names(circuits))
> # fname.list <- list() 
> # for(idx in names(circuits)){
> #    print(idx)
> #    fname.list[[idx]] <- paste('./circuits.sim/circuit_simulated_', idx, '.rds', sep = '')
> # }
> # names(fname.list) <- names(circuits)
> 
> 
> # select TOP n TFs from each of the THREE methods: NetAct, MARINa, and RI
> #------------------------------------------------------------------------
> coreTFs.list <- readRDS('../../../tfSets/data/coreTFs.rds')
> names(coreTFs.list)
 [1] "0.05" "0.06" "0.07" "0.08" "0.09" "0.1"  "0.12" "0.14" "0.16" "0.18"
[11] "0.2" 
> 
> # Construct possible circuit set for the TFs based on each TF-target DB in the TF-target DB set
> #---------------------------------------------------------------------------------------------- 
> targetDB.list <- readRDS('../../../databases/targetDB.list.rds')
> names(targetDB.list)
 [1] "0.05" "0.06" "0.07" "0.08" "0.09" "0.1"  "0.12" "0.14" "0.16" "0.18"
[11] "0.2" 
> 
> 
> # Load ExpressionSet object and DE results ---- START 
> # Load brain array expression data as an ExpressionSet object
> #------------------------------------------------------------
> fname.eset.brain_array <- '../../../data.tfs/eset.brain_array.rda'
> load(fname.eset.brain_array) # loads object eset.brain_array  
> # Load DE results 
> #---------------- 
> fname.de.results <- '../../../data.tfs/de.results.rda'
> load(fname.de.results) # loads object de.results 
> # Load ExpressionSet object and DE results ---- END 
> 
> # Load cluster cut for reference data:
> #----------------------------------------
> #clusterCut.REF <- clusterCut
> #write.csv(clusterCut.REF, file = paste0('./circuits/', 'clusterCut.REF.csv'), quote = F, row.names = T) 
> 
> tmp <- read.csv(file = paste0('../../../networks/circuits/', 'clusterCut.REF.csv'), row.names = 1)
> clusterCut.REF <- as.integer(tmp$x)
> names(clusterCut.REF) <- as.character(rownames(tmp))
> 
> circuit_idx <- '0.09-32-0.85'
> # Calculate heatmap similarity between data.REF and data.sim 
> #------------------------------------------------------------
> # obtain TF activities using NetAct:
> fr <- strsplit(circuit_idx, split = '-')[[1]][1]
> top.TFs.count <- strsplit(circuit_idx, split = '-')[[1]][2]  
> 
> #coreTFs <- coreTFs.list[[top.TFs.count]] 
> coreTFs <- coreTFs.list[[fr]][[top.TFs.count]][['COMB']]
> targetDB = targetDB.list[[fr]] 
> length(coreTFs)
[1] 88
> coreTFs <- intersect(coreTFs, names(targetDB))
> length(coreTFs) 
[1] 88
> a = TF_Activity(tfs = coreTFs,
+                 GSDB = targetDB,  
+                 eset = eset.brain_array,
+                 DErslt = de.results  #DErslt=de.results$Overall
+ )
[1] "ARNT"
[1] "ASCC1"
[1] "ATF2"
[1] "ATM"
[1] "CDX1"
[1] "CRY1"
[1] "CTBP1"
[1] "CUX1"
[1] "DNMT1"
[1] "DNMT3A"
[1] "E2F1"
[1] "E2F2"
[1] "E2F4"
[1] "E2F5"
[1] "E2F7"
[1] "EBF1"
[1] "ELF3"
[1] "ELK1"
[1] "ETS2"
[1] "FOXA1"
[1] "GATA1"
[1] "GPD1"
[1] "HAND2"
[1] "HMGA1"
[1] "HMGA2"
[1] "HNF4A"
[1] "HSF1"
[1] "IRF3"
[1] "IRF7"
[1] "IRF8"
[1] "KLF1"
[1] "KLF12"
[1] "MCM2"
[1] "MCM3"
[1] "MCM4"
[1] "MCM5"
[1] "MCM6"
[1] "MCM7"
[1] "MECOM"
[1] "MEF2C"
[1] "MTF1"
[1] "MYBL2"
[1] "MYC"
[1] "MYCN"
[1] "NANOS1"
[1] "NFATC2"
[1] "NFATC4"
[1] "NFE2L2"
[1] "NFIA"
[1] "NFIB"
[1] "NFIC"
[1] "NFYA"
[1] "NFYB"
[1] "NFYC"
[1] "NR0B1"
[1] "NR1H4"
[1] "NR5A1"
[1] "PAX5"
[1] "PAX8"
[1] "PBX1"
[1] "POU2F1"
[1] "POU3F2"
[1] "RARA"
[1] "RB1"
[1] "RFXANK"
[1] "RUNX1"
[1] "SMAD5"
[1] "SMAD7"
[1] "SMAD9"
[1] "SMARCA4"
[1] "SOS1"
[1] "SOS2"
[1] "SOX10"
[1] "STAT3"
[1] "STAT6"
[1] "TCF3"
[1] "TFAP2C"
[1] "TFDP1"
[1] "TP53"
[1] "TP63"
[1] "TP73"
[1] "USF1"
[1] "USF2"
[1] "ZBTB33"
[1] "ZCCHC14"
[1] "ZNF423"
[1] "ZNF740"
> data.REF <- a$all_activities
> 
> # obtain simulated data:
> racipe <- readRDS(file = paste('./data.sim/circuit_simulated_', 
+                                circuit_idx, '.rds', sep = '')) 
> racipe <- sracipeNormalize(racipe)  
> data.sim <- assay(racipe,1)  
> 
> #break()
> # calculate similarity between activitites and racipe simulation data:
> hS <- sracipeHeatmapSimilarity(dataReference = data.REF,
+                                dataSimulation = data.sim, 
+                                returnData = T, 
+                                #nClusters = NUM_CLUSTERS, 
+                                clusterCut = clusterCut.REF)  
Calculating the similarity index
pvalue method
simulation permutation
[1] 1
[1] 2
> 
> # save hS object to an output file:
> fname.hS <- paste(outdir.hS, 'hS_', circuit_idx, '.rds', sep = '')
> saveRDS(hS, file = fname.hS)
> 
> proc.time()
   user  system elapsed 
 37.247   1.641  39.193 
