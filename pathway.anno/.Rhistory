remove(list = ls())
outdir <- './degs/'
dir.create(outdir)
fname.de.results <- '../data.tfs/de.results.rda'
load(fname.de.results) # loads object de.results
class(de.results)
DEGs <- de.results$degs
class(DEGs)
rm(de.results)
length(DEGs)
write.table(DEGs, file = paste(outdir, 'DEGs.txt', sep = ''),
col.names = F, row.names = F, quote = F)
remove(list = ls())
NO_PERMUTATIONS <- 10000 # 10
GENESET_SIZE_TSH <- 8
PVALUE.CUTOFF <- 0.05 # used to select top pathways
remove(list = ls())
outdir <- './degs/'
dir.create(outdir)
library(NetAct)
library(NetAct)
remove(list = ls())
outdir <- './degs/'
dir.create(outdir)
library(NetAct)
library(NetAct)
install.packages('â€˜Matrix')
version
degs.cur <- read.csv(file = './degs/DEGs.txt')
View(degs.cur)
degs.phase.37 <- read.csv(file = './/Users/kateba/research/aml.idh/phase.37/networks/pathway.anno/degs/DEGs.txt')
degs.phase.37 <- read.csv(file = '/Users/kateba/research/aml.idh/phase.37/networks/pathway.anno/degs/DEGs.txt')
View(degs.phase.37)
degs.cur <- read.csv(file = './degs/DEGs.txt', header = F)
degs.phase.37 <- read.csv(file = '/Users/kateba/research/aml.idh/phase.37/networks/pathway.anno/degs/DEGs.txt',
header = F)
degs.cur <- as.character(unlist(degs.cur))
head(degs.cur)
degs.phase.37 <- as.character(unlist(degs.phase.37))
common.degs <- intersect(degs.cur, degs.phase.37)
length(common.degs)
length(degs.cur)
length(degs.phase.37)
remove(list = ls())
outdir <- './degs/'
dir.create(outdir)
library(NetAct)
fname.de.results <- '../../data.tfs/de.results.rda'
load(fname.de.results) # loads object de.results
fname.de.results <- '../data.tfs/de.results.rda'
load(fname.de.results) # loads object de.results
names(de.results)
circuit_metrics.sim <- read.csv(file = '../results/summary.circuits.sim.sorted.csv', row.names = 1)
circuit_metrics.sim <- read.csv(file = '../networks/results/summary.circuits.sim.sorted.csv', row.names = 1)
circuit_idx <- rownames(circuit_metrics.sim)[1]
circuit_idx
fname.hS <- paste('../circuits.hS/hS_', circuit_idx, '.rds', sep = '')
fname.hS <- paste('../networks/circuits.hS/hS_', circuit_idx, '.rds', sep = '')
hS <- readRDS(file = fname.hS)
class(hS)
names(hS)
data.sim <- hS$dataSimulation
class(data.sim)
data.ref <- hS$dataReference
dim(data.ref)
TFs_in_circuit <- rownames(data.ref)
length(TFs_in_circuit)
regDB.list <- readRDS('../databases/targetDB.list.rds')
regDB.feature.ratio <- feature_ratio_cutoff <- strsplit(circuit_idx, '-', 2)[[1]][2]
regDB.comb <- regDB.list[[regDB.feature.ratio]]
regDB.feature.ratio
circuit_idx
strsplit(circuit_idx, '-', 2)[[1]][2]
head(names(regDB.list))
strsplit(circuit_idx, '-', 2)[[1]][2]
strsplit(circuit_idx, '-', 2)[[1]][1]
regDB.feature.ratio <- feature_ratio_cutoff <- strsplit(circuit_idx, '-', 2)[[1]][1]
regDB.comb <- regDB.list[[regDB.feature.ratio]]
length(names(regDB.comb)) # 416
regDB.circuit <- lapply(TFs_in_circuit, function(tf) regDB.comb[[tf]])
length(regDB.circuit)
names(regDB.circuit) <- TFs_in_circuit
names(regDB.circuit)
head(regDB.circuit)
TFsPlusTargets_in_cicuit <- unique(c(names(regDB.circuit), unlist(regDB.circuit)))
length(TFsPlusTargets_in_cicuit) # 2950
genes.common <- intersect(TFsPlusTargets_in_cicuit, de.results$degs)
length(genes.common) # 1318
fname.out <- paste(outdir, 'DEGs_in_circuit.txt', sep = '')
write.table(genes.common, file = fname.out,
col.names = F, row.names = F, quote = F)
remove(list = ls())
NO_PATHWAYS <- 10
SIGN.LEVEL <- 0.1 #0.05 #0.01
outdir <- './tfs.annotated/'
dir.create(outdir)
source('../functions.R')
degs.circuit <- read.table(file = './degs/DEGs_in_circuit.txt', header = F)
degs.circuit <- as.character(degs.circuit$V1)
length(degs.circuit)
nTOTAL <- length(degs.circuit)
nTOTAL
degs.pathways <- read.table(file = './enrichr.degs_in_circuit/KEGG_2019_Human_table.txt',
header = T, sep = '\t')
degs.pathways <- degs.pathways[1:NO_PATHWAYS, ]
rownames(degs.pathways) <- degs.pathways$Term
View(degs.pathways)
pathways_to_remove <- c("Pathways in cancer", "Epstein-Barr virus infection", "Hepatitis B")
degs.pathways <- degs.pathways[!rownames(degs.pathways) %in% pathways_to_remove, ]
NO_PATHWAYS <- NO_PATHWAYS - length(pathways_to_remove)
NO_PATHWAYS
degs.pathways$Genes[1]
length(degs.pathways$Genes[1])
degs.pathway <- degs.pathways$Genes[1]
class(degs.pathway)
degs.pathway <- as.character(degs.pathway)
degs.pathway  <- unlist(strsplit(degs.pathway, "\\;"))
length(degs.pathway)
head(degs.pathway)
circuit_metrics.sim <- read.csv(file = '../networks/results/summary.circuits.sim.sorted.csv', row.names = 1)
circuit_idx <- rownames(circuit_metrics.sim)[1]
circuit_idx #"50-0.09-0.75"
circuit_idx #"0.07-32-0.75"
fname.hS <- paste('../circuits.hS/hS_', circuit_idx, '.rds', sep = '')
fname.hS <- paste('../networks/circuits.hS/hS_', circuit_idx, '.rds', sep = '')
hS <- readRDS(file = fname.hS)
class(hS)
names(hS)
data.sim <- hS$dataSimulation
class(data.sim)
data.ref <- hS$dataReference
dim(data.ref)
TFs_in_circuit <- rownames(data.ref)
length(TFs_in_circuit)
targetDB.list <- readRDS(file = '../databases/targetDB.list.rds')
length(names(targetDB.list))
targetDB <- targetDB.list$`0.05`
length(names(targetDB.list))
regDB.feature.ratio <- feature_ratio_cutoff <- strsplit(circuit_idx, '-', 2)[[1]][1]
regDB.feature.ratio
targetDB <- targetDB.list[[regDB.feature.ratio]]
length(names(targetDB))
targetDB <- targetDB[TFs_in_circuit]
length(names(targetDB))
for(tf in names(targetDB)){
targetDB[[tf]] <- intersect(degs.circuit, targetDB[[tf]])
#break()
}
tf.sig.table <- as.data.frame(matrix(nrow = dim(degs.pathways)[1], ncol = length(targetDB)))
rownames(tf.sig.table) <- degs.pathways$Term
colnames(tf.sig.table) <- names(targetDB)
for(pname in rownames(degs.pathways)){
#print(pname)
degs.pathway <- as.character(degs.pathways[pname, "Genes"])
#degs.pathway  <- unlist(strsplit(degs.pathway, "\\;"))
pathway_DEGS <- unlist(strsplit(degs.pathway, "\\;"))
for(tf in names(targetDB)){
TF_DEGS <- c(tf, targetDB[[tf]])
ftest <- FET_1not2(glist1=TF_DEGS, glist2=pathway_DEGS , ntot=nTOTAL)
#ftest <- FET_1not2(glist1=pathway_DEGS, glist2=TF_DEGS, ntot=nTOTAL)
tf.sig.table[pname, tf] <- ftest$pval
}
#break()
}
source('../functions.R')
source('./functions.R')
tf.sig.table <- as.data.frame(matrix(nrow = dim(degs.pathways)[1], ncol = length(targetDB)))
rownames(tf.sig.table) <- degs.pathways$Term
colnames(tf.sig.table) <- names(targetDB)
for(pname in rownames(degs.pathways)){
#print(pname)
degs.pathway <- as.character(degs.pathways[pname, "Genes"])
#degs.pathway  <- unlist(strsplit(degs.pathway, "\\;"))
pathway_DEGS <- unlist(strsplit(degs.pathway, "\\;"))
for(tf in names(targetDB)){
TF_DEGS <- c(tf, targetDB[[tf]])
ftest <- FET_1not2(glist1=TF_DEGS, glist2=pathway_DEGS , ntot=nTOTAL)
#ftest <- FET_1not2(glist1=pathway_DEGS, glist2=TF_DEGS, ntot=nTOTAL)
tf.sig.table[pname, tf] <- ftest$pval
}
#break()
}
dim(tf.sig.table)
tf.sig.table.t <- t(tf.sig.table)
tf.sig.table.t <- tf.sig.table.t[order(rownames(tf.sig.table.t)), ]
fname.out <- paste(outdir, 'tf.sig.table.csv', sep = '')
write.csv(format(tf.sig.table.t, digits = 2), file = fname.out, quote = F, row.names = T)
sig_patways_byTF <- as.data.frame(matrix(nrow = dim(tf.sig.table.t)[1], ncol = (NO_PATHWAYS*2+1)))
colnames(sig_patways_byTF) <- c('tf', paste('pathway_', rep(1:NO_PATHWAYS, times=1), sep = ''),
paste('pathway_', rep(1:NO_PATHWAYS, times=1), '.pvalue', sep = '') )
rownames(sig_patways_byTF) <- rownames(tf.sig.table.t)
for(tf in rownames(tf.sig.table.t)){
#print(tf)
pathways.sig <- tf.sig.table.t[tf,]
pathways.sig.sorted <- sort(pathways.sig)
sig_patways_byTF[tf, ] <- c(tf, names(pathways.sig.sorted), as.numeric(pathways.sig.sorted))
#break
}
TFsWithAnnoted_pathways <- as.data.frame(matrix(nrow = length(rownames(sig_patways_byTF)), ncol = 3))
colnames(TFsWithAnnoted_pathways) <- c('tf','count','pathways')
rownames(TFsWithAnnoted_pathways) <- rownames(sig_patways_byTF)
count.outer <- 1
count.inner <- 1
for(tf in rownames(sig_patways_byTF)){
#print(tf)
patways.sele <- c()
for(pathway.no in 1:NO_PATHWAYS){
colname.pathway <- paste('pathway_', pathway.no, sep = '')
colname.pvalue <- paste('pathway_', pathway.no, '.pvalue', sep = '')
#if(as.numeric(sig_patways_byTF[tf, colname.pvalue])<=SIGN.LEVEL){
pathway.name <- sig_patways_byTF[tf, colname.pathway]
pathway.pvalue <- sig_patways_byTF[tf, colname.pvalue]
pathway.pvalue <- format(as.numeric(pathway.pvalue), digits = 1)
# pathway.pvalue.pair <- paste(sig_patways_byTF[tf, colname.pathway], '(', sig_patways_byTF[tf, colname.pvalue], ')' ,sep = '')
pathway.pvalue.pair <- paste(pathway.name, '(', pathway.pvalue, ')' ,sep = '')
patways.sele <- c(patways.sele, pathway.pvalue.pair)
#}
count.inner <- count.inner + 1
}
patways.sele.collapsed <- paste(patways.sele, collapse = ';', sep = '')
TFsWithAnnoted_pathways[tf, ] <- c(tf, length(patways.sele), patways.sele.collapsed)
count.outer <- count.outer + 1
#break()
}
TFsWithAnnoted_pathways <- TFsWithAnnoted_pathways[order(TFsWithAnnoted_pathways$tf), ]
fname.out <- paste(outdir, 'TFsWithAnnoted_pathways.csv', sep = '')
fname.out
write.csv(TFsWithAnnoted_pathways, file = fname.out, quote = F, row.names = F)
pathway_names <- sort(c(as.character(degs.pathways$Term)))
pathway_names <- c(pathway_names, 'NA')
pathway_ids <- c(1, 2, 2, 3, 4, 5, 6, 7)
names(pathway_ids) <- pathway_names
pathway_vs_id <- cbind(names(pathway_ids), as.character(pathway_ids))
colnames(pathway_vs_id) <- c('pathway', 'pathway_id')
fname.out <- paste(outdir, 'pathway_vs_id', '.csv', sep = '')
fname.out
write.csv(pathway_vs_id, file = fname.out, quote = F, row.names = F)
TFsWith_singleAnnotedPathway <- as.data.frame(matrix(nrow = length(TFs_in_circuit), ncol = 3))
colnames(TFsWith_singleAnnotedPathway) <- c('tf', 'pathway', 'pathway_id')
rownames(TFsWith_singleAnnotedPathway) <- TFs_in_circuit
for(tf in TFs_in_circuit){
#print(tf)
pathways.cur <- unlist(strsplit(TFsWithAnnoted_pathways[tf, "pathways"], "\\;"))
pathway.top <- unlist(strsplit(pathways.cur[1], "\\("))[1]
pvalue.tmp <-  unlist(strsplit(pathways.cur[1], "\\("))[2]
pvalue.top <- as.numeric(unlist(strsplit(pvalue.tmp, "\\)")))
if(!is.na(print(pathway.top)) && pvalue.top <= SIGN.LEVEL){
TFsWith_singleAnnotedPathway[tf, ] <- c(tf, names(pathway_ids[pathway.top]),
as.character(pathway_ids[pathway.top]))
}else {
TFsWith_singleAnnotedPathway[tf, ] <- c(tf, names(pathway_ids['NA']),
as.character(pathway_ids['NA']))
}
#break()
}
TFsWith_singleAnnotedPathway <- TFsWith_singleAnnotedPathway[order(TFsWith_singleAnnotedPathway$tf), ]
sum(TFsWith_singleAnnotedPathway$pathway_id==1) # 3 AMPK
sum(TFsWith_singleAnnotedPathway$pathway_id==2) # 13 Cell cycle/Cellular senescence
sum(TFsWith_singleAnnotedPathway$pathway_id==3) # 3 JAK-STAT
sum(TFsWith_singleAnnotedPathway$pathway_id==4) # 2 MAPK
sum(TFsWith_singleAnnotedPathway$pathway_id==5) # 9 p53
sum(TFsWith_singleAnnotedPathway$pathway_id==6) # 3 PI3k-Akt
sum(TFsWith_singleAnnotedPathway$pathway_id==7) # 9 None
fname.out <- paste(outdir, 'TFsWith_singleAnnotedPathway.csv', sep = '')
fname.out
write.csv(TFsWith_singleAnnotedPathway, file = fname.out, quote = F, row.names = F)
sum(TFsWith_singleAnnotedPathway$pathway_id==1) # 3 AMPK
sum(TFsWith_singleAnnotedPathway$pathway_id==2) # 13 Cell cycle/Cellular senescence
remove(list = ls())
NO_PATHWAYS <- 10
SIGN.LEVEL <- 0.1 #0.05 #0.01
outdir <- './tfs.annotated/'
dir.create(outdir)
source('./functions.R')
degs.circuit <- read.table(file = './degs/DEGs_in_circuit.txt', header = F)
degs.circuit <- as.character(degs.circuit$V1)
length(degs.circuit)
nTOTAL <- length(degs.circuit)
nTOTAL
degs.pathways <- read.table(file = './enrichr.degs_in_circuit/KEGG_2019_Human_table.txt',
header = T, sep = '\t')
degs.pathways <- degs.pathways[1:NO_PATHWAYS, ]
rownames(degs.pathways) <- degs.pathways$Term
pathways_to_remove <- c("Pathways in cancer", "Epstein-Barr virus infection", "Hepatitis B")
degs.pathways <- degs.pathways[!rownames(degs.pathways) %in% pathways_to_remove, ]
NO_PATHWAYS <- NO_PATHWAYS - length(pathways_to_remove)
NO_PATHWAYS
degs.pathways$Genes[1]
length(degs.pathways$Genes[1])
degs.pathway <- degs.pathways$Genes[1]
degs.pathway <- degs.pathways$Genes[1]
class(degs.pathway)
degs.pathway <- as.character(degs.pathway)
degs.pathway  <- unlist(strsplit(degs.pathway, "\\;"))
length(degs.pathway)
head(degs.pathway)
circuit_metrics.sim <- read.csv(file = '../networks/results/summary.circuits.sim.sorted.csv', row.names = 1)
circuit_idx <- rownames(circuit_metrics.sim)[1]
circuit_idx #"0.07-32-0.75"
fname.hS <- paste('../networks/circuits.hS/hS_', circuit_idx, '.rds', sep = '')
hS <- readRDS(file = fname.hS)
class(hS)
names(hS)
data.sim <- hS$dataSimulation
class(data.sim)
data.ref <- hS$dataReference
dim(data.ref)
TFs_in_circuit <- rownames(data.ref)
length(TFs_in_circuit)
targetDB.list <- readRDS(file = '../databases/targetDB.list.rds')
length(names(targetDB.list))
regDB.feature.ratio <- feature_ratio_cutoff <- strsplit(circuit_idx, '-', 2)[[1]][1]
targetDB <- targetDB.list[[regDB.feature.ratio]]
length(names(targetDB))
regDB.feature.ratio
circuit_idx
targetDB <- targetDB.list[[regDB.feature.ratio]]
length(names(targetDB))
targetDB <- targetDB[TFs_in_circuit]
length(names(targetDB))
for(tf in names(targetDB)){
targetDB[[tf]] <- intersect(degs.circuit, targetDB[[tf]])
#break()
}
tf.sig.table <- as.data.frame(matrix(nrow = dim(degs.pathways)[1], ncol = length(targetDB)))
rownames(tf.sig.table) <- degs.pathways$Term
colnames(tf.sig.table) <- names(targetDB)
for(pname in rownames(degs.pathways)){
#print(pname)
degs.pathway <- as.character(degs.pathways[pname, "Genes"])
#degs.pathway  <- unlist(strsplit(degs.pathway, "\\;"))
pathway_DEGS <- unlist(strsplit(degs.pathway, "\\;"))
for(tf in names(targetDB)){
TF_DEGS <- c(tf, targetDB[[tf]])
ftest <- FET_1not2(glist1=TF_DEGS, glist2=pathway_DEGS , ntot=nTOTAL)
#ftest <- FET_1not2(glist1=pathway_DEGS, glist2=TF_DEGS, ntot=nTOTAL)
tf.sig.table[pname, tf] <- ftest$pval
}
#break()
}
dim(tf.sig.table)
tf.sig.table.t <- t(tf.sig.table)
tf.sig.table.t <- tf.sig.table.t[order(rownames(tf.sig.table.t)), ]
fname.out <- paste(outdir, 'tf.sig.table.csv', sep = '')
write.csv(format(tf.sig.table.t, digits = 2), file = fname.out, quote = F, row.names = T)
sig_patways_byTF <- as.data.frame(matrix(nrow = dim(tf.sig.table.t)[1], ncol = (NO_PATHWAYS*2+1)))
colnames(sig_patways_byTF) <- c('tf', paste('pathway_', rep(1:NO_PATHWAYS, times=1), sep = ''),
paste('pathway_', rep(1:NO_PATHWAYS, times=1), '.pvalue', sep = '') )
sig_patways_byTF <- as.data.frame(matrix(nrow = dim(tf.sig.table.t)[1], ncol = (NO_PATHWAYS*2+1)))
colnames(sig_patways_byTF) <- c('tf', paste('pathway_', rep(1:NO_PATHWAYS, times=1), sep = ''),
paste('pathway_', rep(1:NO_PATHWAYS, times=1), '.pvalue', sep = '') )
rownames(sig_patways_byTF) <- rownames(tf.sig.table.t)
View(sig_patways_byTF)
for(tf in rownames(tf.sig.table.t)){
#print(tf)
pathways.sig <- tf.sig.table.t[tf,]
pathways.sig.sorted <- sort(pathways.sig)
sig_patways_byTF[tf, ] <- c(tf, names(pathways.sig.sorted), as.numeric(pathways.sig.sorted))
#break
}
TFsWithAnnoted_pathways <- as.data.frame(matrix(nrow = length(rownames(sig_patways_byTF)), ncol = 3))
colnames(TFsWithAnnoted_pathways) <- c('tf','count','pathways')
rownames(TFsWithAnnoted_pathways) <- rownames(sig_patways_byTF)
count.outer <- 1
count.inner <- 1
for(tf in rownames(sig_patways_byTF)){
#print(tf)
patways.sele <- c()
for(pathway.no in 1:NO_PATHWAYS){
colname.pathway <- paste('pathway_', pathway.no, sep = '')
colname.pvalue <- paste('pathway_', pathway.no, '.pvalue', sep = '')
#if(as.numeric(sig_patways_byTF[tf, colname.pvalue])<=SIGN.LEVEL){
pathway.name <- sig_patways_byTF[tf, colname.pathway]
pathway.pvalue <- sig_patways_byTF[tf, colname.pvalue]
pathway.pvalue <- format(as.numeric(pathway.pvalue), digits = 1)
# pathway.pvalue.pair <- paste(sig_patways_byTF[tf, colname.pathway], '(', sig_patways_byTF[tf, colname.pvalue], ')' ,sep = '')
pathway.pvalue.pair <- paste(pathway.name, '(', pathway.pvalue, ')' ,sep = '')
patways.sele <- c(patways.sele, pathway.pvalue.pair)
#}
count.inner <- count.inner + 1
}
patways.sele.collapsed <- paste(patways.sele, collapse = ';', sep = '')
TFsWithAnnoted_pathways[tf, ] <- c(tf, length(patways.sele), patways.sele.collapsed)
count.outer <- count.outer + 1
#break()
}
TFsWithAnnoted_pathways <- TFsWithAnnoted_pathways[order(TFsWithAnnoted_pathways$tf), ]
View(TFsWithAnnoted_pathways)
fname.out <- paste(outdir, 'TFsWithAnnoted_pathways.csv', sep = '')
fname.out
write.csv(TFsWithAnnoted_pathways, file = fname.out, quote = F, row.names = F)
pathway_names <- sort(c(as.character(degs.pathways$Term)))
fname.out <- paste(outdir, 'TFsWithAnnoted_pathways.csv', sep = '')
fname.out
write.csv(TFsWithAnnoted_pathways, file = fname.out, quote = F, row.names = F)
outdir
pathway_names <- sort(c(as.character(degs.pathways$Term)))
pathway_names <- c(pathway_names, 'NA')
pathway_ids <- c(1, 2, 2, 3, 4, 5, 6, 7)
names(pathway_ids) <- pathway_names
pathway_vs_id <- cbind(names(pathway_ids), as.character(pathway_ids))
colnames(pathway_vs_id) <- c('pathway', 'pathway_id')
View(pathway_vs_id)
fname.out <- paste(outdir, 'pathway_vs_id', '.csv', sep = '')
fname.out
write.csv(pathway_vs_id, file = fname.out, quote = F, row.names = F)
TFsWith_singleAnnotedPathway <- as.data.frame(matrix(nrow = length(TFs_in_circuit), ncol = 3))
View(TFsWith_singleAnnotedPathway)
colnames(TFsWith_singleAnnotedPathway) <- c('tf', 'pathway', 'pathway_id')
rownames(TFsWith_singleAnnotedPathway) <- TFs_in_circuit
for(tf in TFs_in_circuit){
#print(tf)
pathways.cur <- unlist(strsplit(TFsWithAnnoted_pathways[tf, "pathways"], "\\;"))
pathway.top <- unlist(strsplit(pathways.cur[1], "\\("))[1]
pvalue.tmp <-  unlist(strsplit(pathways.cur[1], "\\("))[2]
pvalue.top <- as.numeric(unlist(strsplit(pvalue.tmp, "\\)")))
if(!is.na(print(pathway.top)) && pvalue.top <= SIGN.LEVEL){
TFsWith_singleAnnotedPathway[tf, ] <- c(tf, names(pathway_ids[pathway.top]),
as.character(pathway_ids[pathway.top]))
}else {
TFsWith_singleAnnotedPathway[tf, ] <- c(tf, names(pathway_ids['NA']),
as.character(pathway_ids['NA']))
}
#break()
}
sum(TFsWith_singleAnnotedPathway$pathway_id==1) # 3 AMPK
sum(TFsWith_singleAnnotedPathway$pathway_id==2) # 13 Cell cycle/Cellular senescence
sum(TFsWith_singleAnnotedPathway$pathway_id==3) # 3 JAK-STAT
sum(TFsWith_singleAnnotedPathway$pathway_id==4) # 2 MAPK
sum(TFsWith_singleAnnotedPathway$pathway_id==5) # 9 p53
sum(TFsWith_singleAnnotedPathway$pathway_id==6) # 3 PI3k-Akt
sum(TFsWith_singleAnnotedPathway$pathway_id==7) # 9 None
fname.out <- paste(outdir, 'TFsWith_singleAnnotedPathway.csv', sep = '')
fname.out
write.csv(TFsWith_singleAnnotedPathway, file = fname.out, quote = F, row.names = F)
remove(list = ls())
library(sRACIPE)
outdir <- './tfs.annotated/'
circuit_metrics <- read.csv(file = '../networks/results/summary.circuits.sim.sorted.csv', row.names = 1)
circuit_idx <- rownames(circuit_metrics)[1]
circuit_idx # "50-0.09-0.75" - top circuit in all topologies
circuit_idx # "0.07-32-0.75" - top circuit in all topologies
racipe <- readRDS(file = paste('../networks/circuits.sim/circuit_simulated_',
circuit_idx, '.rds', sep = '') )
names(racipe)
length(names(racipe))
circuit_tpo <- sracipeCircuit(racipe)
length(unique(sort(c(circuit_tpo$Source, circuit_tpo$Target)) ))
fname.out <- paste(outdir, 'circuit-', circuit_idx, '.tpo' ,sep = '')
write.table(circuit_tpo, file = fname.out, sep = '\t', quote = F, row.names = F)
