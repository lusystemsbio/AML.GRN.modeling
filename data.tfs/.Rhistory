max(tfs.ordered$qvals)
getwd()
# Clean environment and set working direcotry
#--------------------------------------------
rm(list=ls())
setwd(getwd())
# set directory paths
#-------------------
datadir_raw <- '../data.raw/'
#---------------------#
# CONSTANTS
#---------------------#
NO_PERMUTATIONS <- 10000
CONTROL <- 'CTRL'
#---------------------#
# Load library functions
#---------------------#
libdir <- '../lib/'
source('./lib.data.tfs.R')
#---------------------#
# Load expression data
#---------------------#
fname_data <- paste0(datadir_raw, "raw_brainarray.sele.txt")
edata <- read.table(file = fname_data,
header=TRUE, sep ='\t',
row.names=1)
dim(edata)
#------------------------------------------------------#
# Create an ExpressionSet instance from expression data
#------------------------------------------------------#
eset.brain_array <- create.ExpressionSet_instance(edata)
# Save eExpressionSet instance
#-----------------------------
save(eset.brain_array, file = paste('eset.brain_array.rda', sep = '',
collapse = NULL))
#--------------------#
# Calculate DE genes
#--------------------#
# create compare list
#compList = c("CTRL-IDH1", "CTRL-IDH2")
# Calculate multi comparison DE genes:
# library(NetAct)
# de.results = MicroProcess(eset = eset.brain_array, compList = compList)
# summary(de.results)
compList = c("CTRL-IDH")
library(NetAct)
de.results = MicroDegs(eset = eset.brain_array)
names(de.results)
# Save DE results
#----------------
save(de.results, file = paste('de.results.rda', sep = '', collapse = NULL))
# Load old gene set DB: hgs
#----------------
#fname.tfdb <- './hgs.rdata'
#load(fname.tfdb)
#fname.tfdb <- './hgs.rcis.combined.filtered.rds'
fname.tfdb <- './hgs.rds'
hgs <- readRDS(file = fname.tfdb)
length(names(hgs))
#--------------------------
# Find TFs by GSEA analysis
#--------------------------
names(de.results)
tfs.CTRL.IDH = TF_GSEA(GSDB=hgs, #GSDB=hDB,
DErslt = de.results, #de.results$`CTRL-IDH`, #de.results$Overall,
minSize=8,
nperm = NO_PERMUTATIONS,
qval = T)
names(tfs.CTRL.IDH)
class(tfs.CTRL.IDH)
# save TFs
fname.tfs <- './tfs.CTRL.IDH.csv'
write.csv(tfs.CTRL.IDH, file = fname.tfs, row.names = FALSE, quote = FALSE)
rm(list=ls())
setwd(getwd())
libdir <- '../lib/'
source('./lib.data.tfs.R')
fname_tfs <- './tfs.CTRL.IDH.csv'
tfs.df  <- read.csv(file = fname_tfs)
tfs.ordered  <- order.TFs_with_Q0(tfs.df)
View(tfs.ordered)
View(tfs.df)
min(tfs.df$qvals)
max(tfs.df$qvals)
cor(tfs.df$pvals, tfs.df$qvals)
cor(tfs.ordered$pvals, tfs.ordered$qvals)
tfs.ordered
dim(tfs.ordered)
View(tfs.ordered)
fname_tfs.ordered  <- './tfs.CTRL.IDH.ordered.csv'
write.csv(tfs.ordered, file = fname_tfs.ordered, row.names = FALSE, quote = FALSE)
rm(list=ls())
setwd(getwd())
libdir <- '../lib/'
figdir <- './figs/'
dir.create(figdir)
source(paste0(libdir, 'lib.aml.idh.R'))
library(NetAct)
library(Biobase)
library(dplyr)
fname_tf  <- "./tfs.CTRL.IDH.ordered.csv"
tfs.df <- read.csv(file = fname_tf)
View(tfs.df)
tfs.all.df <- read.csv(file = fname_tf)
tfs.df <- data.frame(tfs.all.df$tf)
colnames(tfs.df) <- 'TF'
fname.eset <- 'eset.brain_array.rda'
load(fname.eset)
class(eset.brain_array)
fname.de.results <- 'de.results.rda'
load(fname.de.results)
data <- exprs(eset.brain_array)
dim(data)
fname.tfdb <- './hgs.rds'
hgs <- readRDS(fname.tfdb)
length(names(hgs))
names(de.results)
tfs.valid <- intersect(names(hgs), tfs.df$TF)
length(tfs.valid)
dim(tfs.df$TF)
length(tfs.df$TF)
length(tfs.valid)
NUM_OF_TFS <- 50
tfs.df <- data.frame(tfs.all.df$tf[1:NUM_OF_TFS])
colnames(tfs.df) <- 'TF'
tfs.valid <- intersect(names(hgs), tfs.df$TF)
length(tfs.valid)
a = TF_Activity(tfs = as.character(tfs.df$TF),
GSDB=hgs, #GSDB=hDB,
eset=data,
DErslt=de.results  #de.results$Overall
)
class(a)
dim(a$all_activities)
act.tmp <- a$all_activities
tfs.valid <- intersect(names(hgs), tfs.df$TF)
length(tfs.valid)
WIDTH= 12 #16
HEIGHT=12 #20 #12
fname_heatmap <- paste(figdir, 'activity_vs_expression.',
toString(WIDTH), 'X', toString(HEIGHT),
'.pdf',
sep = '')
pdf(file = fname_heatmap, width = WIDTH, height = HEIGHT, paper = 'special')
Combine_heatmap(a$all_activities, eset=eset.brain_array)
dev.off()
rm(list=ls())
setwd(getwd())
library(NetAct)
library(Biobase)
library(dplyr)
tfs.all.df <- read.csv(file = fname_tf)
fname_tf  <- "./tfs.CTRL.IDH.ordered.csv"
tfs.all.df <- read.csv(file = fname_tf)
tfs.netact <- data.frame(tfs.all.df[1:NUM_OF_TFS], )
NUM_OF_TFS <- 50
tfs.netact <- data.frame(tfs.all.df[1:NUM_OF_TFS,] )
View(tfs.netact)
View(tfs.netact)
stats.tf <- data.frame(as.character(tfs.netact$tf), tfs.netact$qvals, -log10(tfs.netact$qvals))
colnames(stats.tf) <- c('tf', 'qval', 'nlogqval')
class(stats.tf$qval)
class(stats.tf$tf)
View(stats.tf)
library(ggplot2)
class(stats.tf$tf)
stats.tf$tf <- factor(stats.tf$tf, levels =  stats.tf$tf)
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=nlogqval),
stat="identity", fill="forestgreen", alpha=0.5)
p1
p2 <- p1 + theme(axis.text.x = element_blank(),  #element_text(angle = 90, hjust = 0.7, vjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p2
plot.qval <- p2
fname.tfdb <- './hgs.rds'
hgs <- readRDS(fname.tfdb)
length(names(hgs))
fname.de.results <- 'de.results.rda'
load(fname.de.results)
fname.eset <- 'eset.brain_array.rda'
load(fname.eset)
class(eset.brain_array)
data <- exprs(eset.brain_array)
dim(data)
tfs.valid <- intersect(names(hgs), as.character(stats.tf$tf))
length(tfs.valid)
a = TF_Activity(tfs = tfs.valid, # as.character(tfs.df$TF),
GSDB=hgs, #GSDB=hDB,
eset=data,
DErslt=de.results  #de.results$Overall
)
tf.act <- a$all_activities
dim(tf.act)
tf.act.ordered <- tf.act[as.character(stats.tf$tf), ]
View(tf.act)
tf.act_avg <- data.frame(rowMeans(tf.act.ordered[,1:11]),  rowMeans(tf.act.ordered[,12:20]))
View(tf.act)
class(stats.tf$tf)
as.character(stats.tf$tf)
as.character(stats.tf$tf)
setdiff(as.character(stats.tf$tf), rownames(tf.act))
tfs_to_remove <- setdiff(as.character(stats.tf$tf), rownames(tf.act))
sum(stats.tf$tf==tfs_to_remove)
s <- stats.tf$tf %in% tfs_to_remove
head(s)
length(s)
which(s)
s[34]
stats.tf[34,]
tfs_to_remove
stats.tf$tf
s <- as.character(stats.tf$tf) %in% tfs_to_remove
head(s)
length(s)
which(s)
s[34]
stats.tf[34,]
head(s)
tmp.df <- stats.tf[which(!(as.character(stats.tf$tf) %in% tfs_to_remove)), ]
dim(tmp.df)
tmp.df <- stats.tf[which(!(as.character(stats.tf$tf) %in% tfs_to_remove)), ]
dim(tmp.df)
stats.tf <- tmp.df
dim(tf.act)
tf.act.ordered <- tf.act[as.character(stats.tf$tf), ]
tf.act_avg <- data.frame(rowMeans(tf.act.ordered[,1:11]),  rowMeans(tf.act.ordered[,12:20]))
colnames(tf.act_avg) <- c('ctrl', 'aml')
tmp.df <- stats.tf
stats.tf <- data.frame(tmp.df, tf.act_avg$ctrl, tf.act_avg$aml)
colnames(stats.tf) <- c(colnames(tmp.df), 'act.ctrl', 'act.aml')
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=act.ctrl),
stat="identity", fill="blue", alpha=0.5) + ylim(c(-0.85, 0.85))
p1
p2 <- p1 + theme(axis.text.x = element_blank(), #element_text(angle = 90, hjust = 0.7, vjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p2
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=act.aml),
stat="identity", fill="red", alpha=0.5) + ylim(c(-0.85, 0.85))
p1
p2 <- p1 + theme(axis.text.x = element_text(angle = 90, hjust = 0.7, vjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=act.aml),
stat="identity", fill="red", alpha=0.5) + ylim(c(-0.9, 0.85))
p1
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=act.aml),
stat="identity", fill="red", alpha=0.5) + ylim(c(-0.9, 0.9))
p1
p2 <- p1 + theme(axis.text.x = element_text(angle = 90, hjust = 0.7, vjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p2
plot.act.aml <- p2
plot.list <- list(plot.qval, plot.act.ctrl, plot.act.aml)
library(gridExtra)
plot_on_grid <- grid.arrange(grobs=plot.list, nrow=3)
plot.list <- list(plot.qval, plot.act.ctrl, plot.act.aml)
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=nlogqval),
stat="identity", fill="forestgreen", alpha=0.5)
p1
p2 <- p1 + theme(axis.text.x = element_blank(),  #element_text(angle = 90, hjust = 0.7, vjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p2
plot.qval <- p2
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=act.ctrl),
stat="identity", fill="blue", alpha=0.5) + ylim(c(-0.85, 0.85))
p1
p2 <- p1 + theme(axis.text.x = element_blank(), #element_text(angle = 90, hjust = 0.7, vjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=act.ctrl),
stat="identity", fill="blue", alpha=0.5) + ylim(c(-0.90, 0.90))
p1
p2 <- p1 + theme(axis.text.x = element_blank(), #element_text(angle = 90, hjust = 0.7, vjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p2
plot.act.ctrl <- p2
p1 <- ggplot(stats.tf) +
geom_bar(aes(x=tf, y=act.aml),
stat="identity", fill="red", alpha=0.5) + ylim(c(-0.9, 0.9))
p1
p2 <- p1 + theme(axis.text.x = element_text(angle = 90, hjust = 0.7, vjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p2
plot.act.aml <- p2
plot.list <- list(plot.qval, plot.act.ctrl, plot.act.aml)
library(gridExtra)
plot_on_grid <- grid.arrange(grobs=plot.list, nrow=3)
WIDTH <- 12
HEIGHT <- 6
outdir <- './figs.stats/'
dir.create(outdir)
outdir <- './figs/'
dir.create(outdir)
fname.out <- paste(outdir, 'qvals-vs-activities-', WIDTH, '-', HEIGHT, '.pdf', sep = '')
ggsave(filename = fname.out, plot_on_grid, width = WIDTH, height = HEIGHT)
rm(list=ls())
setwd(getwd())
NO_TOP_TFS_FROM_EACH_METHOD <- 50
tfs.netact <- read.table(file = './tfs.TOP.netact.txt', header = T)
length(tfs.netact$tf)
rm(list=ls())
# Clean environment and set working direcotry
#--------------------------------------------
rm(list=ls())
setwd(getwd())
# Load library functions
#-------------------------
libdir <- '../lib/'
#source(paste0(libdir, 'lib.aml.idh.R'))
source('./lib.data.tfs.R')
# Load TF list file
#-------------------
fname_tfs <- './tfs.CTRL.IDH.csv'
tfs.df  <- read.csv(file = fname_tfs)
# Order TFS with Q val zero by Z.score
#=====================================
tfs.ordered  <- order.TFs_with_Q0(tfs.df)
# # Save TFs after ordering
#---------------------------
fname_tfs.ordered  <- './tfs.CTRL.IDH.ordered.csv'
write.csv(tfs.ordered, file = fname_tfs.ordered, row.names = FALSE, quote = FALSE)
View(tfs.ordered)
PVALUE.CUTOFF <- 0.50 #0.10 #0.05 #0.10
source('./lib.data.tfs.R')
library(NetAct)
library(Biobase)
library(dplyr)
COLNAME.PREFIX.CONTROL <- 'CTRL'
COLNAME.PREFIX.TREATMENT <- 'IDH'
fname.eset <- 'eset.brain_array.rda'
load(fname.eset)
class(eset.brain_array)
fname.de.results <- 'de.results.rda'
load(fname.de.results)
data <- exprs(eset.brain_array)
dim(data)
fname.tfdb <- './hgs.rds'
hgs <- readRDS(file = fname.tfdb)
length(names(hgs))
fname_tf  <- "./tfs.CTRL.IDH.ordered.csv"
tfs.ordered.df <- read.csv(file = fname_tf)
dim(tfs.ordered.df)
TFs.balanced <- select.balanced.tfs.by_pval (tfs.df=tfs.ordered.df,
GSDB=hgs,
eset=data,
de.results=de.results, #de.results$`CTRL-IDH1`,
COLNAME.PREFIX.CONTROL=COLNAME.PREFIX.CONTROL,
COLNAME.PREFIX.TREATMENT=COLNAME.PREFIX.TREATMENT,
PVALUE.CUTOFF=PVALUE.CUTOFF)
tfs.CTRL <- TFs.balanced$CTRL
tfs.TRTMT <- TFs.balanced$TRTMT
rownames(tfs.CTRL) <- NULL
rownames(tfs.TRTMT) <- NULL
dim(tfs.CTRL)
dim(tfs.TRTMT)
TFs.TOP.df <- rbind(TFs.balanced$CTRL, TFs.balanced$TRTMT)
TFs.TOP.ordered.by.pvalue <- TFs.TOP.df[order(TFs.TOP.df$pvals),]
max(TFs.TOP.ordered.by.pvalue$pvals)
min(TFs.TOP.ordered.by.pvalue$pvals)
fname.tfs.balanced <- './tfs.TOP.netact.csv'
write.csv(format(TFs.TOP.ordered.by.pvalue, digits=4),
file = fname.tfs.balanced,
quote = FALSE, row.names = F)
fname.tfs <- './tfs.TOP.netact.txt'
write.table(format(TFs.TOP.ordered.by.pvalue, digits=4),
file = fname.tfs, quote = FALSE,
row.names = FALSE, sep = '\t')
# Clean environment and set working direcotry
#--------------------------------------------
rm(list=ls())
setwd(getwd())
# Load library functions
#-------------------------
libdir <- '../lib/'
#source(paste0(libdir, 'lib.aml.idh.R'))
source('./lib.data.tfs.R')
# Load TF list file
#-------------------
fname_tfs <- './tfs.CTRL.IDH.csv'
tfs.df  <- read.csv(file = fname_tfs)
# Order TFS with Q val zero by Z.score
#=====================================
tfs.ordered  <- order.TFs_with_Q0(tfs.df)
# # # Save TFs after ordering
# #---------------------------
# fname_tfs.ordered  <- './tfs.CTRL.IDH.ordered.csv'
# write.csv(tfs.ordered, file = fname_tfs.ordered, row.names = FALSE, quote = FALSE)
#Save balanced TFs
#-----------------
fname.tfs.balanced <- './tfs.Netact.csv'
write.csv(format(tfs.ordered, digits=4),
file = fname.tfs.balanced,
quote = FALSE, row.names = F)
#Save selected total balanced tfs
#---------------------------------
fname.tfs <- './tfs.Netact.txt'
write.table(format(tfs.ordered, digits=4),
file = fname.tfs, quote = FALSE,
row.names = FALSE, sep = '\t')
rm(list=ls())
setwd(getwd())
tfs.netact <- read.table(file = './tfs.Netact.txt', header = T)
length(tfs.netact$tf)
tfs.netact <- tfs.netact[order(tfs.netact$zq, decreasing = FALSE), ]
tfs.MARINa <- read.csv(file = './TFs.MARINa.csv', header = T)
tfs.MARINa  <- tfs.MARINa[order(tfs.MARINa$FDR, decreasing = FALSE), ]
tfs.RI <- read.csv(file = './TFs.RI.csv', header = T)
colnames(tfs.RI)
tfs.RI <- tfs.RI[order(tfs.RI$aggr.error, decreasing = TRUE), ]
TFs.combined <- list()
TFs.combined[['NetAct']] <- tfs.netact
TFs.combined[['MARINa']] <- tfs.MARINa
TFs.combined[['RI']] <- tfs.RI
fname.tfs.comb <- './TFs.combined.rds'
saveRDS(TFs.combined, file = fname.tfs.comb)
fname_tf  <- "./tfs.CTRL.IDH.ordered.csv"
tfs.all.df <- read.csv(file = fname_tf)
View(tfs.all.df)
fname_tf  <- "./tfs.Netact.txt"
tfs.all.df <- read.table(file = fname_tf, header = T)
fname_tf  <- "./tfs.Netact.txt"
tfs.all.df <- read.table(file = fname_tf, header = T)
tfs.df <- data.frame(tfs.all.df$tf[1:NUM_OF_TFS])
NUM_OF_TFS <- 50
tfs.df <- data.frame(tfs.all.df$tf[1:NUM_OF_TFS])
colnames(tfs.df) <- 'TF'
rm(list=ls())
setwd(getwd())
NUM_OF_TFS <- 50
libdir <- '../lib/'
figdir <- './figs/'
dir.create(figdir)
library(NetAct)
library(Biobase)
library(dplyr)
fname_tf  <- "./tfs.Netact.txt"
tfs.all.df <- read.table(file = fname_tf, header = T)
tfs.df <- data.frame(tfs.all.df$tf[1:NUM_OF_TFS])
colnames(tfs.df) <- 'TF'
fname.eset <- 'eset.brain_array.rda'
load(fname.eset)
class(eset.brain_array)
fname.de.results <- 'de.results.rda'
load(fname.de.results)
data <- exprs(eset.brain_array)
dim(data)
fname.tfdb <- './hgs.rds'
hgs <- readRDS(fname.tfdb)
length(names(hgs))
names(de.results)
tfs.valid <- intersect(names(hgs), tfs.df$TF)
length(tfs.valid)
a = TF_Activity(tfs = as.character(tfs.df$TF), #tfs.valid
GSDB=hgs, #GSDB=hDB,
eset=data,
DErslt=de.results  #de.results$Overall
)
class(a)
dim(a$all_activities)
act.tmp <- a$all_activities
WIDTH= 12 #16
HEIGHT=12 #20 #12
fname_heatmap <- paste(figdir, 'activity_vs_expression.',
toString(WIDTH), 'X', toString(HEIGHT),
'.pdf',
sep = '')
pdf(file = fname_heatmap, width = WIDTH, height = HEIGHT, paper = 'special')
Combine_heatmap(a$all_activities, eset=eset.brain_array)
dev.off()
getwd()
rm(list=ls())
setwd(getwd())
datadir_raw <- '../data.raw/'
NO_PERMUTATIONS <- 10000
CONTROL <- 'CTRL'
libdir <- '../lib/'
source('./lib.data.tfs.R')
fname_data <- paste0(datadir_raw, "raw_brainarray.sele.txt")
edata <- read.table(file = fname_data,
header=TRUE, sep ='\t',
row.names=1)
dim(edata)
eset.brain_array <- create.ExpressionSet_instance(edata)
compList = c("CTRL-IDH")
library(NetAct)
de.results = MicroDegs(eset = eset.brain_array)
names(de.results)
fname.tfdb <- './hgs.rds'
hgs <- readRDS(file = fname.tfdb)
length(names(hgs))
names(de.results)
tfs.CTRL.IDH = TF_GSEA(GSDB=hgs, #GSDB=hDB,
DErslt = de.results, #de.results$`CTRL-IDH`, #de.results$Overall,
minSize=8,
nperm = NO_PERMUTATIONS,
qval = T)
names(tfs.CTRL.IDH)
class(tfs.CTRL.IDH)
